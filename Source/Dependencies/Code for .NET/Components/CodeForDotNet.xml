<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CodeForDotNet</name>
    </assembly>
    <members>
        <member name="T:CodeForDotNet.ByteExtensions">
            <summary>
            Contains extensions for working with the <see cref="T:System.Byte"/> structure.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ByteExtensions.Reverse(System.Byte)">
            <summary>
            Returns a value with all bits reversed.
            </summary>
        </member>
        <member name="T:CodeForDotNet.CodeForDotNetXsd">
            <summary>
            Core XML constants and helper methods.
            </summary>
        </member>
        <member name="F:CodeForDotNet.CodeForDotNetXsd.XmlXsdFileName">
            <summary>
            XML XSD filename.
            </summary>
        </member>
        <member name="F:CodeForDotNet.CodeForDotNetXsd.XsdFileName">
            <summary>
            Types XSD filename.
            </summary>
        </member>
        <member name="F:CodeForDotNet.CodeForDotNetXsd.XsltXsdFileName">
            <summary>
            XSLT XSD filename.
            </summary>
        </member>
        <member name="M:CodeForDotNet.CodeForDotNetXsd.GetSchemaFile">
            <summary>
            Gets the <see cref="T:System.Xml.Schema.XmlSchema"/> which defines types in this assembly. This may not be sufficient for validation because it does not include any
            imported types.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Collections.ArrayExtensions">
            <summary>
            Provides helper methods and extensions for working with arrays and collections.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Collections.ArrayExtensions.AreEqual(System.Collections.IList,System.Collections.IList)">
            <summary>
            Compares two list based arrays by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Collections.ArrayExtensions.AreEqual(System.Collections.IEnumerable,System.Collections.IEnumerable)">
            <summary>
            Compares two collections by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Collections.ArrayExtensions.AreEqual(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compares part of two arrays for equality.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Collections.ArrayExtensions.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Searches any array for a value, i.e. without having to create a list or collection.
            </summary>
            <typeparam name="T">Array type.</typeparam>
            <param name="array">Array to search.</param>
            <param name="value">Value to find.</param>
            <returns>True when present.</returns>
        </member>
        <member name="M:CodeForDotNet.Collections.ArrayExtensions.Contains(System.Collections.Generic.IEnumerable{System.String},System.String,System.StringComparison)">
            <summary>
            Checks if the string array contains the specified value optionally ignoring case.
            </summary>
            <param name="array">Array to search.</param>
            <param name="value">Value to search for.</param>
            <param name="comparisonType">Comparison options, e.g. set to <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> for a case insensitive comparison.</param>
            <returns>True when found.</returns>
        </member>
        <member name="M:CodeForDotNet.Collections.ArrayExtensions.Contains(System.Collections.Specialized.StringCollection,System.String,System.StringComparison)">
            <summary>
            Checks if the string collection contains the specified value optionally ignoring case.
            </summary>
            <param name="collection">Collection to search.</param>
            <param name="value">Value to search for.</param>
            <param name="comparisonType">Comparison options, e.g. set to <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> for a case insensitive comparison.</param>
            <returns>True when found.</returns>
        </member>
        <member name="M:CodeForDotNet.Collections.ArrayExtensions.Dispose(System.Collections.IList)">
            <summary>
            Disposes all members implementing <see cref="T:System.IDisposable"/>.
            </summary>
            <param name="list">List of items to dispose.</param>
        </member>
        <member name="M:CodeForDotNet.Collections.ArrayExtensions.GetHashCode(System.Collections.IList)">
            <summary>
            Gets the hash code of all items in the array.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Collections.DictionaryExtensions">
            <summary>
            Extensions and helper methods for work with <see cref="T:System.Collections.IDictionary"/> and <see cref="T:System.Collections.Generic.IDictionary`2"/> objects.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Collections.DictionaryExtensions.AddKeysToValuesDefaultFormat">
            <summary>
            Default format string used prefix the key of a dictionary to it's values.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Collections.DictionaryExtensions.AddKeysToValues(System.Collections.IDictionary)">
            <summary>
            Prefixes the key to all values in a dictionary using the <see cref="F:CodeForDotNet.Collections.DictionaryExtensions.AddKeysToValuesDefaultFormat"/>.
            </summary>
            <param name="dictionary">Dictionary to update.</param>
        </member>
        <member name="M:CodeForDotNet.Collections.DictionaryExtensions.AddKeysToValues(System.Collections.IDictionary,System.String)">
            <summary>
            Prefixes the key to all values in a dictionary using a specific format.
            </summary>
            <param name="dictionary">Dictionary to update.</param>
            <param name="format">Format used to join the values. The first argument is the key and the second the value.</param>
        </member>
        <member name="M:CodeForDotNet.Collections.DictionaryExtensions.AreEqual``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Compares two dictionaries by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Collections.DictionaryExtensions.Dispose(System.Collections.IDictionary)">
            <summary>
            Disposes all members implementing <see cref="T:System.IDisposable"/>.
            </summary>
            <param name="dictionary">Dictionary of items to dispose.</param>
        </member>
        <member name="M:CodeForDotNet.Collections.DictionaryExtensions.Dispose``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Disposes all members implementing <see cref="T:System.IDisposable"/>.
            </summary>
            <param name="dictionary">Dictionary of items to dispose.</param>
        </member>
        <member name="M:CodeForDotNet.Collections.DictionaryExtensions.GetHashCode(System.Collections.IDictionary)">
            <summary>
            Gets the hash code of the keys and values of all items in the dictionary, or zero when null.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Collections.DictionaryExtensions.GetHashCodeOfItems(System.Collections.IDictionary)">
            <summary>
            Gets the hash code of the keys and values of all items in the dictionary.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Collections.DictionaryExtensions.GetIfExists``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <summary>
            Returns the item in the dictionary if it exists, otherwise null.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Collections.DisposableCollection`1">
            <summary>
            Disposable collection of <typeparamref name="T"/> items. Also disposes items when removed or the collection is cleared.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Collections.DisposableCollection`1.#ctor">
            <summary>
            Creates an empty instance.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Collections.DisposableCollection`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Creates an instance based on an existing list.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Collections.DisposableCollection`1.Finalize">
            <summary>
            Overrides the finalizer to ensure any available dispose logic is called.
            </summary>
        </member>
        <member name="E:CodeForDotNet.Collections.DisposableCollection`1.Disposed">
            <summary>
            Fires after this object has been Disposed. Use this event to ensure all references are invalidated and any dependent objects are also Disposed or released.
            </summary>
        </member>
        <member name="E:CodeForDotNet.Collections.DisposableCollection`1.Disposing">
            <summary>
            Fires when the Dispose method is called on this object (except when garbage collected).
            </summary>
        </member>
        <member name="P:CodeForDotNet.Collections.DisposableCollection`1.IsDisposed">
            <summary>
            Indicated that this object has been Disposed. When this flag is true, do not use this object in any way.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Collections.DisposableCollection`1.IsDisposing">
            <summary>
            Indicates that this object is committed to the process of Disposing. When this flag is true, do not pass any references or queue it for processing.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Collections.DisposableCollection`1.Dispose">
            <summary>
            Frees all resources held by this object, immediately (rather than waiting for Garbage Collection). This can provide a performance increase and avoid
            memory congestion on objects that hold many or "expensive" (large) external resources.
            </summary>
            <remarks>
            First fires the Disposing event, which could cancel this operation. When not canceled, calls the <see cref="M:CodeForDotNet.Collections.DisposableCollection`1.Dispose(System.Boolean)"/> method, which should be
            overridden in inheriting classes to release their local resources. Finally fires the Disposed event. Use the IsDisposing and IsDisposed properties to
            avoid using objects that are about to or have been disposed.
            </remarks>
        </member>
        <member name="M:CodeForDotNet.Collections.DisposableCollection`1.ClearItems">
            <summary>
            Disposes then clears all items.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Collections.DisposableCollection`1.Dispose(System.Boolean)">
            <summary>
            Inheritors implement the <see cref="M:CodeForDotNet.Collections.DisposableCollection`1.Dispose(System.Boolean)"/> method to dispose resources accordingly, depending on whether they have been called proactively
            or automatically via the finalizer.
            </summary>
            <param name="disposing">
            True when called proactively, i.e. Not during garbage collection. Managed resources should not be accessed when this is False, just references and
            unmanaged resources released.
            </param>
        </member>
        <member name="M:CodeForDotNet.Collections.DisposableCollection`1.RemoveItem(System.Int32)">
            <summary>
            Disposes then removes an item.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Collections.DisposableCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Disposes then replaces an item.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Collections.INotifyDictionaryChanged`2">
            <summary>
            Notifies listeners of changes to a dictionary, such as when items are added, removed, changed or the whole collection reset.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="E:CodeForDotNet.Collections.INotifyDictionaryChanged`2.DictionaryChanged">
            <summary>
            Occurs when the dictionary changes.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Collections.NotifyDictionaryChangedEventArgs`2">
            <summary>
            Event arguments for the <see cref="E:CodeForDotNet.Collections.ObservableDictionary`2.DictionaryChanged"/> event.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Collections.NotifyDictionaryChangedEventArgs`2.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,`0,`1)">
            <summary>
            Creates an instance with specific values.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Collections.NotifyDictionaryChangedEventArgs`2.CollectionChange">
            <summary>
            Change details.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Collections.NotifyDictionaryChangedEventArgs`2.Key">
            <summary>
            Changed entry key.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Collections.NotifyDictionaryChangedEventArgs`2.Value">
            <summary>
            Changed entry key.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Collections.ObservableDictionary`2">
            <summary>
            Implementation of IObservableMap that supports re-entrance for use as a default view model.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Collections.ObservableDictionary`2._dictionary">
            <summary>
            Underlying dictionary which this class makes observable.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Collections.ObservableDictionary`2.#ctor">
            <summary>
            Creates an instance.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Collections.ObservableDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
        </member>
        <member name="E:CodeForDotNet.Collections.ObservableDictionary`2.DictionaryChanged">
            <summary>
            Fired when a change occurs with arguments containing details about the change.
            </summary>
        </member>
        <member name="E:CodeForDotNet.Collections.ObservableDictionary`2.PropertyChanged">
            <summary>
            Fired when a change occurs.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Collections.ObservableDictionary`2.Count">
            <summary>
            Number of entries.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Collections.ObservableDictionary`2.IsReadOnly">
            <summary>
            Indicates whether this is read only.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Collections.ObservableDictionary`2.Keys">
            <summary>
            Key values.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Collections.ObservableDictionary`2.Values">
            <summary>
            Entry values.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Collections.ObservableDictionary`2.Item(`0)">
            <summary>
            Looks-up an entry by key.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Collections.ObservableDictionary`2.Add(`0,`1)">
            <summary>
            Adds a new entry using the specified key and value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Collections.ObservableDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds a key pair entry.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Collections.ObservableDictionary`2.Clear">
            <summary>
            Clears all entries.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Collections.ObservableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Checks if the entry exists in this collection.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Collections.ObservableDictionary`2.ContainsKey(`0)">
            <summary>
            Checks if the current key exists in this collection.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:CodeForDotNet.Collections.ObservableDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies entries from this collection to an array.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Collections.ObservableDictionary`2.GetEnumerator">
            <summary>
            Gets an enumerator for this collection.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Collections.ObservableDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for this collection.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Collections.ObservableDictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization method.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Collections.ObservableDictionary`2.Remove(`0)">
            <summary>
            Removes an entry by key.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Collections.ObservableDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes an entry.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Collections.ObservableDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets an entry's value by key if it exists.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Collections.ObservableDictionary`2.OnDictionaryChanged(System.Collections.Specialized.NotifyCollectionChangedAction,`0,`1)">
            <summary>
            Fires the <see cref="E:CodeForDotNet.Collections.ObservableDictionary`2.DictionaryChanged"/> event.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Collections.ObservableDictionary`2.OnPropertyChanged(System.String)">
            <summary>
            Fires the <see cref="E:CodeForDotNet.Collections.ObservableDictionary`2.PropertyChanged"/> event.
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:CodeForDotNet.ComponentModel.BigIntegerConverter">
            <summary>
            Type converter which supports use of <see cref="T:System.Numerics.BigInteger"/> types in dependency properties.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.BigIntegerConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Tests if conversion is possible from a source type.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.BigIntegerConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Tests if conversion is possible to a destination type.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.BigIntegerConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts a value from a source type.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.BigIntegerConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the current value to the target type.
            </summary>
        </member>
        <member name="T:CodeForDotNet.ComponentModel.DataObject">
            <summary>
            CRUD data object with intelligent data change event caching, able to distinguish between instance and store changes, e.g. clearing pending instance
            events when store is read (which would overwrite any pending changes).
            </summary>
        </member>
        <member name="F:CodeForDotNet.ComponentModel.DataObject._committedPropertiesChanged">
            <summary>
            List of all committed (i.e. <see cref="M:CodeForDotNet.ComponentModel.DataObject.Create"/> or <see cref="M:CodeForDotNet.ComponentModel.DataObject.Update"/>) property names which changed during <see cref="M:CodeForDotNet.ComponentModel.IEventCache.SuspendEvents"/>.
            </summary>
        </member>
        <member name="F:CodeForDotNet.ComponentModel.DataObject._instancePropertiesChanged">
            <summary>
            List of all property names which changed during <see cref="M:CodeForDotNet.ComponentModel.IEventCache.SuspendEvents"/> since the last <see cref="M:CodeForDotNet.ComponentModel.DataObject.Create"/> or <see cref="M:CodeForDotNet.ComponentModel.DataObject.Update"/>.
            </summary>
        </member>
        <member name="F:CodeForDotNet.ComponentModel.DataObject._changedProperties">
            <summary>
            Changed property storage.
            </summary>
        </member>
        <member name="F:CodeForDotNet.ComponentModel.DataObject._lastChangeAction">
            <summary>
            Caches the last <see cref="E:CodeForDotNet.ComponentModel.DataObject.DataChanged"/> event action when events are suspended. Only the most significant action is cached.
            </summary>
        </member>
        <member name="F:CodeForDotNet.ComponentModel.DataObject._originalProperties">
            <summary>
            Original property storage.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.DataObject.#ctor">
            <summary>
            Creates an instance.
            </summary>
        </member>
        <member name="E:CodeForDotNet.ComponentModel.DataObject.DataChanged">
            <summary>
            Fired when data for this object has changed.
            </summary>
        </member>
        <member name="P:CodeForDotNet.ComponentModel.DataObject.DataState">
            <summary>
            Indicates the current state of the data represented by this instance.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.DataObject.Create">
            <summary>
            Creates the object in storage.
            </summary>
            <remarks>
            Only valid when the <see cref="P:CodeForDotNet.ComponentModel.DataObject.DataState"/> is <see cref="F:CodeForDotNet.ComponentModel.DataObjectState.None"/>. Sets the <see cref="P:CodeForDotNet.ComponentModel.DataObject.DataState"/> to
            <see cref="F:CodeForDotNet.ComponentModel.DataObjectState.Current"/> once successful
            </remarks>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.DataObject.Delete">
            <summary>
            Deletes the object from storage.
            </summary>
            <remarks>
            Only valid when the current <see cref="P:CodeForDotNet.ComponentModel.DataObject.DataState"/> is <see cref="F:CodeForDotNet.ComponentModel.DataObjectState.Current"/> or <see cref="F:CodeForDotNet.ComponentModel.DataObjectState.Changed"/>. Sets the
            <see cref="P:CodeForDotNet.ComponentModel.DataObject.DataState"/> to <see cref="F:CodeForDotNet.ComponentModel.DataObjectState.Deleted"/> once successful.
            </remarks>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.DataObject.NotifyChange(CodeForDotNet.ComponentModel.IDataObject,CodeForDotNet.ComponentModel.DataObjectChangeEventArgs)">
            <summary>
            Notifies this object that a related data object has changed.
            </summary>
            <param name="changed">Changed data object instance.</param>
            <param name="change">Change details.</param>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.DataObject.Read">
            <summary>
            Reads the object from storage.
            </summary>
            <remarks>
            Only valid when the <see cref="P:CodeForDotNet.ComponentModel.DataObject.DataState"/> is not <see cref="F:CodeForDotNet.ComponentModel.DataObjectState.Deleted"/>. Sets the <see cref="P:CodeForDotNet.ComponentModel.DataObject.DataState"/> to
            <see cref="F:CodeForDotNet.ComponentModel.DataObjectState.Current"/> once successful.
            </remarks>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.DataObject.Update">
            <summary>
            Updates the object in storage.
            </summary>
            <remarks>
            Only valid when the current <see cref="P:CodeForDotNet.ComponentModel.DataObject.DataState"/> is <see cref="F:CodeForDotNet.ComponentModel.DataObjectState.Changed"/>. Sets the <see cref="P:CodeForDotNet.ComponentModel.DataObject.DataState"/> to
            <see cref="F:CodeForDotNet.ComponentModel.DataObjectState.Current"/> once successful.
            </remarks>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.DataObject.DoDataChanged(CodeForDotNet.ComponentModel.DataObjectChangeAction,System.Nullable{System.Guid})">
            <summary>
            Fires or caches the DataChanged event.
            </summary>
            <remarks>Sets <see cref="P:CodeForDotNet.ComponentModel.DataObject.DataState"/> property to <see cref="F:CodeForDotNet.ComponentModel.DataObjectState.Changed"/> when properties change.</remarks>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.DataObject.OnChangeNotification(CodeForDotNet.ComponentModel.IDataObject,CodeForDotNet.ComponentModel.DataObjectChangeEventArgs)">
            <summary>
            Handles change notification events, when this object is notified that a related data object has changed via the <see cref="M:CodeForDotNet.ComponentModel.DataObject.NotifyChange(CodeForDotNet.ComponentModel.IDataObject,CodeForDotNet.ComponentModel.DataObjectChangeEventArgs)"/> method.
            </summary>
            <remarks>
            Thread safe locking, <see cref="M:CodeForDotNet.ComponentModel.EventCache.SuspendEvents"/> and <see cref="M:CodeForDotNet.ComponentModel.EventCache.ResumeEvents"/> are handled by the caller. The base class
            implementation does nothing.
            </remarks>
            <param name="changed">Changed data object instance.</param>
            <param name="change">Change details.</param>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.DataObject.OnCreate(System.Collections.Generic.Dictionary{System.Guid,System.Object})">
            <summary>
            Overridden by inheritors to create the object in storage.
            </summary>
            <param name="newProperties">Current property values.</param>
            <returns>Updated properties.</returns>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.DataObject.OnDataChanged(CodeForDotNet.ComponentModel.DataObjectChangeEventArgs)">
            <summary>
            Fires the <see cref="E:CodeForDotNet.ComponentModel.DataObject.DataChanged"/> event.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.DataObject.OnDelete(System.Collections.Generic.Dictionary{System.Guid,System.Object})">
            <summary>
            Overridden by inheritors to delete the object from storage.
            </summary>
            <param name="originalProperties">Original properties for concurrency check.</param>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.DataObject.OnEventsResumed">
            <summary>
            Called when events are resumed the last time, i.e. is not fired when nested. Fires the <see cref="E:CodeForDotNet.ComponentModel.DataObject.DataChanged"/> event when changes are pending.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.DataObject.OnRead(System.Collections.Generic.Dictionary{System.Guid,System.Object})">
            <summary>
            Overridden by inheritors to read the object from storage.
            </summary>
            <param name="originalProperties">Original properties.</param>
            <returns>Updated properties.</returns>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.DataObject.OnUpdate(System.Collections.Generic.Dictionary{System.Guid,System.Object},System.Collections.Generic.Dictionary{System.Guid,System.Object})">
            <summary>
            Overridden by inheritors to update the object in storage.
            </summary>
            <param name="changedProperties">Changed properties.</param>
            <param name="originalProperties">Original properties.</param>
            <returns>Updated properties.</returns>
        </member>
        <member name="T:CodeForDotNet.ComponentModel.DataObjectChangeAction">
            <summary>
            Describes the type of change made to a <see cref="T:CodeForDotNet.ComponentModel.IDataObject"/>.
            </summary>
        </member>
        <member name="F:CodeForDotNet.ComponentModel.DataObjectChangeAction.Create">
            <summary>
            The data record was created.
            </summary>
        </member>
        <member name="F:CodeForDotNet.ComponentModel.DataObjectChangeAction.Read">
            <summary>
            The data record was read.
            </summary>
            <remarks>All properties and relations should be refreshed.</remarks>
        </member>
        <member name="F:CodeForDotNet.ComponentModel.DataObjectChangeAction.Update">
            <summary>
            The data record was updated with current properties and relations from the object.
            </summary>
        </member>
        <member name="F:CodeForDotNet.ComponentModel.DataObjectChangeAction.Delete">
            <summary>
            The data record was deleted.
            </summary>
            <remarks>Related objects and data should be deleted or disposed.</remarks>
        </member>
        <member name="F:CodeForDotNet.ComponentModel.DataObjectChangeAction.Property">
            <summary>
            The instance properties have been changed, but not updated at the data source.
            </summary>
        </member>
        <member name="T:CodeForDotNet.ComponentModel.DataObjectChangeEventArgs">
            <summary>
            Event arguments for the <see cref="E:CodeForDotNet.ComponentModel.IDataObject.DataChanged"/> event.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.DataObjectChangeEventArgs.#ctor">
            <summary>
            Creates an empty instance.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.DataObjectChangeEventArgs.#ctor(CodeForDotNet.ComponentModel.DataObjectChangeAction,System.Guid[])">
            <summary>
            Creates an instance with the specified values.
            </summary>
        </member>
        <member name="P:CodeForDotNet.ComponentModel.DataObjectChangeEventArgs.Action">
            <summary>
            Action which occurred.
            </summary>
        </member>
        <member name="T:CodeForDotNet.ComponentModel.DataObjectCollection`1">
            <summary>
            Collection of <see cref="T:CodeForDotNet.ComponentModel.DataObject"/> items supporting ID index and central event notification.
            </summary>
        </member>
        <member name="F:CodeForDotNet.ComponentModel.DataObjectCollection`1._suspendEventsCount">
            <summary>
            Counts the number of times the <see cref="M:CodeForDotNet.ComponentModel.DataObjectCollection`1.SuspendEvents"/> method was called to decide whether events are currently suspended, when greater than
            zero. The value is decremented on each call to <see cref="M:CodeForDotNet.ComponentModel.DataObjectCollection`1.ResumeEvents"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.DataObjectCollection`1.#ctor">
            <summary>
            Creates an empty instance.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.DataObjectCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates an instance based on an existing enumeration.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.DataObjectCollection`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Creates an instance based on an existing list.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.DataObjectCollection`1.Finalize">
            <summary>
            Frees unmanaged resources during finalization.
            </summary>
        </member>
        <member name="E:CodeForDotNet.ComponentModel.DataObjectCollection`1.EventsResumed">
            <summary>
            Fired when events are suspended the first time, i.e. is not fired when nested.
            </summary>
        </member>
        <member name="E:CodeForDotNet.ComponentModel.DataObjectCollection`1.EventsSuspended">
            <summary>
            Fired when events are suspended the first time, i.e. is not fired when nested.
            </summary>
        </member>
        <member name="E:CodeForDotNet.ComponentModel.DataObjectCollection`1.ItemDataChanged">
            <summary>
            Fired when an item <see cref="E:CodeForDotNet.ComponentModel.DataObject.DataChanged"/> event occurs. The sender remains as the item which originated the event.
            </summary>
        </member>
        <member name="P:CodeForDotNet.ComponentModel.DataObjectCollection`1.EventsAreEnabled">
            <summary>
            Flags that events are current enabled, and will be fired immediately. This can be used by inheriting classes to determine whether to cache or fire
            events immediately, in conjunction with the ResumeEvents() override.
            </summary>
        </member>
        <member name="P:CodeForDotNet.ComponentModel.DataObjectCollection`1.SyncRoot">
            <summary>
            Thread synchronization object.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.DataObjectCollection`1.op_Inequality(CodeForDotNet.ComponentModel.DataObjectCollection{`0},CodeForDotNet.ComponentModel.DataObjectCollection{`0})">
            <summary>
            Compares two instances of this type for equality by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.DataObjectCollection`1.op_Equality(CodeForDotNet.ComponentModel.DataObjectCollection{`0},CodeForDotNet.ComponentModel.DataObjectCollection{`0})">
            <summary>
            Compares two instances of this type for equality by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.DataObjectCollection`1.Dispose">
            <summary>
            Proactively frees resources owned by this object.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.DataObjectCollection`1.Equals(System.Object)">
            <summary>
            Compares this instance with another object by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.DataObjectCollection`1.GetHashCode">
            <summary>
            Gets a hash code based on the current values of this object.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.DataObjectCollection`1.ResumeEvents">
            <summary>
            Resumes all events after SuspendEvents. Automatically fires any pending events when appropriate. Implements reference counting to detect when to
            finally resume events, at which point the Resume event is fired.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.DataObjectCollection`1.SuspendEvents">
            <summary>
            Disables all events until ResumeEvents is called. Implements reference counting to detect when to finally resume events, increasing performance by
            preventing un-necessary event handling.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.DataObjectCollection`1.Dispose(System.Boolean)">
            <summary>
            Proactively frees resources owned by this object.
            </summary>
            <remarks>Full dispose pattern is not implemented because there is no need to un-hook events during finalization.</remarks>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.DataObjectCollection`1.HookEvents(`0)">
            <summary>
            Hooks all monitored events of an item.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.DataObjectCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles changes to the collection.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.DataObjectCollection`1.OnItemDataChanged(System.Object,CodeForDotNet.ComponentModel.DataObjectChangeEventArgs)">
            <summary>
            Bubbles the <see cref="E:CodeForDotNet.ComponentModel.DataObject.DataChanged"/> event of an item in this collection.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.DataObjectCollection`1.UnhookEvents(`0)">
            <summary>
            Un-hooks all monitored events of an item.
            </summary>
        </member>
        <member name="T:CodeForDotNet.ComponentModel.DataObjectState">
            <summary>
            State of a <see cref="T:CodeForDotNet.ComponentModel.IDataObject"/>.
            </summary>
        </member>
        <member name="F:CodeForDotNet.ComponentModel.DataObjectState.None">
            <summary>
            No state has been loaded yet. Objects have this state when they are created, before <see cref="M:CodeForDotNet.ComponentModel.IDataObject.Create"/> or
            <see cref="M:CodeForDotNet.ComponentModel.IDataObject.Read"/> is called.
            </summary>
        </member>
        <member name="F:CodeForDotNet.ComponentModel.DataObjectState.Current">
            <summary>
            The object has all properties loaded, with no uncommitted changes.
            </summary>
        </member>
        <member name="F:CodeForDotNet.ComponentModel.DataObjectState.Changed">
            <summary>
            The object has uncommitted changes.
            </summary>
        </member>
        <member name="F:CodeForDotNet.ComponentModel.DataObjectState.Deleted">
            <summary>
            The object has been deleted.
            </summary>
        </member>
        <member name="T:CodeForDotNet.ComponentModel.EventCache">
            <summary>
            Provides methods and events to implement suspend/resume and caching of events. Events are cached when they are not relevant until an atomic operation has
            completed. This can give great performance gains, especially in graphics related applications.
            </summary>
        </member>
        <member name="F:CodeForDotNet.ComponentModel.EventCache._suspendEventsCount">
            <summary>
            Reference counter for Suspend/Resume events.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.EventCache.#ctor">
            <summary>
            Creates a stand-alone instance.
            </summary>
        </member>
        <member name="E:CodeForDotNet.ComponentModel.EventCache.EventsResumed">
            <summary>
            Fired when events are suspended the first time, i.e. is not fired when nested.
            </summary>
        </member>
        <member name="E:CodeForDotNet.ComponentModel.EventCache.EventsSuspended">
            <summary>
            Fired when events are suspended the first time, i.e. is not fired when nested.
            </summary>
        </member>
        <member name="P:CodeForDotNet.ComponentModel.EventCache.EventsAreEnabled">
            <summary>
            Flags that events are current enabled, and will be fired immediately. This can be used by inheriting classes to determine whether to cache or fire
            events immediately, in conjunction with the ResumeEvents() override.
            </summary>
        </member>
        <member name="P:CodeForDotNet.ComponentModel.EventCache.SyncRoot">
            <summary>
            Thread synchronization object.
            </summary>
            <remarks>
            Lock this object when you read or write properties of this object which must be complete as a batch before any other threads enter the section, e.g.
            during data load or save operations.
            </remarks>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.EventCache.ResumeEvents">
            <summary>
            Resumes all events after SuspendEvents. Automatically fires any pending events.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.EventCache.SuspendEvents">
            <summary>
            Disables all events until ResumeEvents is called.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.EventCache.OnEventsResumed">
            <summary>
            Called when events are resumed the last time, i.e. is not fired when nested. Fires the <see cref="E:CodeForDotNet.ComponentModel.EventCache.EventsResumed"/> event.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.EventCache.OnEventsSuspended">
            <summary>
            Called when events are suspended the first time, i.e. is not fired when nested. Fires the <see cref="E:CodeForDotNet.ComponentModel.EventCache.EventsSuspended"/> event.
            </summary>
        </member>
        <member name="T:CodeForDotNet.ComponentModel.GenericBindingList`1">
            <summary>
            Generic bindable collection of items.
            </summary>
            <remarks>
            To create a binding list of any type, inherit this class passing a key comparing function to the constructor. The <see cref="T:System.ComponentModel.DataObjectAttribute"/> and
            <see cref="T:System.SerializableAttribute"/> must still be defined on your class.
            </remarks>
        </member>
        <member name="F:CodeForDotNet.ComponentModel.GenericBindingList`1._keyComparer">
            <summary>
            Key comparer function used to lookup items in the list, e.g. (x, y) =&gt; x.Id == y.Id
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.GenericBindingList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Func{`0,`0,System.Boolean})">
            <summary>
            Creates an instance based on an existing list.
            </summary>
            <param name="list">Optional items to add to the list.</param>
            <param name="keyComparer">Key comparer used to lookup items in the list, e.g. (x, y) =&gt; x.Id == y.Id.</param>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.GenericBindingList`1.Delete(`0)">
            <summary>
            Deletes an item.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.GenericBindingList`1.Insert(`0)">
            <summary>
            Inserts an item.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.GenericBindingList`1.Select">
            <summary>
            Selects all items.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.GenericBindingList`1.Update(`0)">
            <summary>
            Updates an item.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.GenericBindingList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a range of items.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.GenericBindingList`1.IndexOfEntity(`0)">
            <summary>
            Gets the index of an item.
            </summary>
        </member>
        <member name="T:CodeForDotNet.ComponentModel.IDataObject">
            <summary>
            CRUD data object with event caching.
            </summary>
        </member>
        <member name="E:CodeForDotNet.ComponentModel.IDataObject.DataChanged">
            <summary>
            Fired when data for this object has changed.
            </summary>
        </member>
        <member name="P:CodeForDotNet.ComponentModel.IDataObject.DataState">
            <summary>
            Indicates the current state of the data represented by this instance.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.IDataObject.Create">
            <summary>
            Creates the object in storage.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.IDataObject.Delete">
            <summary>
            Deletes the object from storage.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.IDataObject.Read">
            <summary>
            Reads the object from storage.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.IDataObject.Update">
            <summary>
            Updates the object in storage.
            </summary>
        </member>
        <member name="T:CodeForDotNet.ComponentModel.IEventCache">
            <summary>
            Provides methods and events to implement suspend/resume and caching of events. Events are cached when they are not relevant until an atomic operation has
            completed. This can give great performance gains, especially in graphics related applications.
            </summary>
        </member>
        <member name="E:CodeForDotNet.ComponentModel.IEventCache.EventsResumed">
            <summary>
            Fired when events are suspended the first time, i.e. is not fired when nested.
            </summary>
        </member>
        <member name="E:CodeForDotNet.ComponentModel.IEventCache.EventsSuspended">
            <summary>
            Fired when events are suspended the first time, i.e. is not fired when nested.
            </summary>
        </member>
        <member name="P:CodeForDotNet.ComponentModel.IEventCache.EventsAreEnabled">
            <summary>
            Flags that events are current enabled, and will be fired immediately. This can be used by inheriting classes to determine whether to cache or fire
            events immediately, in conjunction with the ResumeEvents() override.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.IEventCache.ResumeEvents">
            <summary>
            Resumes all events after SuspendEvents. Automatically fires any pending events when appropriate. Implements reference counting to detect when to
            finally resume events, at which point the Resume event is fired.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.IEventCache.SuspendEvents">
            <summary>
            Disables all events until ResumeEvents is called. Implements reference counting to detect when to finally resume events, increasing performance by
            preventing un-necessary event handling.
            </summary>
        </member>
        <member name="T:CodeForDotNet.ComponentModel.IPropertyStore">
            <summary>
            View component dependency object with intelligent property change event caching.
            </summary>
        </member>
        <member name="E:CodeForDotNet.ComponentModel.IPropertyStore.PropertyStoreChanged">
            <summary>
            Fired when properties of this object are changed.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.IPropertyStore.ClearProperty(System.Guid)">
            <summary>
            Clears a property value if it exists, disposing any current value when flagged.
            </summary>
            <param name="id">Property ID.</param>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.IPropertyStore.ContainsProperty(System.Guid)">
            <summary>
            Checks if the property value exists.
            </summary>
            <param name="id">Property ID.</param>
            <returns>True when exists, otherwise false.</returns>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.IPropertyStore.ContainsPropertyValue(System.Guid)">
            <summary>
            Checks if the property has a value.
            </summary>
            <param name="id">Property ID.</param>
            <returns>True when present, otherwise false.</returns>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.IPropertyStore.GetProperty``1(System.Guid)">
            <summary>
            Gets a property value.
            </summary>
            <param name="id">Property ID.</param>
            <returns>Property value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the ID does not exist.</exception>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.IPropertyStore.GetProperty``1(System.Guid,``0)">
            <summary>
            Gets a property value, or a default when it doesn't exist.
            </summary>
            <param name="id">Property ID.</param>
            <param name="defaultValue">Default value.</param>
            <returns>Property value or the default when it doesn't exist.</returns>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.IPropertyStore.GetPropertyIds">
            <summary>
            Gets all property IDs.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.IPropertyStore.NotifyChange(CodeForDotNet.ComponentModel.IPropertyStore,CodeForDotNet.ComponentModel.PropertyStoreChangeEventArgs)">
            <summary>
            Notifies this object that a related view object has changed.
            </summary>
            <param name="changed">Changed view object instance.</param>
            <param name="change">Change details.</param>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.IPropertyStore.SetProperties(System.Collections.Generic.IDictionary{System.Guid,System.Object})">
            <summary>
            Sets multiple properties.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="properties"/> parameter is null or empty.</exception>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.IPropertyStore.SetProperty``1(System.Guid,``0)">
            <summary>
            Sets a property value.
            </summary>
            <param name="id">Property ID.</param>
            <param name="value">Property value.</param>
        </member>
        <member name="T:CodeForDotNet.ComponentModel.IUndoable">
            <summary>
            Summary description for IUndoable.
            </summary>
        </member>
        <member name="E:CodeForDotNet.ComponentModel.IUndoable.ActionCompleted">
            <summary>
            Fired after an action has been made. Includes Undo or Redo.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.IUndoable.BeginAction">
            <summary>
            Prepares to start a new action, rejecting any previously incomplete actions beforehand.
            </summary>
            <remarks>
            To ensure all actions are atomic, you must always call BeginAction before making any changes. Otherwise changes from previously incomplete actions or
            direct data changes could be included.
            </remarks>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.IUndoable.CancelAction">
            <summary>
            Cancels any changes since the last action was completed.
            </summary>
            <remarks>
            Equivalent to BeginAction(), but should still be called to ensure any partial changes are undone and the data is left in a consistent state.
            </remarks>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.IUndoable.EndAction(System.String)">
            <summary>
            Completes the current action, making a record available for Undo/Redo as a unit.
            </summary>
            <param name="name">Short and descriptive action name, as seen in the Undo/Redo list by the user.</param>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.IUndoable.GetRedoList">
            <summary>
            Gets a list of current Redo-able actions.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.IUndoable.GetUndoList">
            <summary>
            Gets a list of current Undo-able actions.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.IUndoable.Redo(System.Int32)">
            <summary>
            Redoes the specified number of actions.
            </summary>
            <param name="actions">Number of actions to redo.</param>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.IUndoable.Undo(System.Int32)">
            <summary>
            Undoes the specified number of actions.
            </summary>
            <param name="actions">Number of actions to undo.</param>
        </member>
        <member name="T:CodeForDotNet.ComponentModel.IViewObject">
            <summary>
            View object with intelligent property, data and event caching.
            </summary>
        </member>
        <member name="E:CodeForDotNet.ComponentModel.IViewObject.ParentChanged">
            <summary>
            Fired when the <see cref="P:CodeForDotNet.ComponentModel.IViewObject.Parent"/> is changed.
            </summary>
        </member>
        <member name="P:CodeForDotNet.ComponentModel.IViewObject.Children">
            <summary>
            Gets a collection of child objects.
            </summary>
        </member>
        <member name="P:CodeForDotNet.ComponentModel.IViewObject.Parent">
            <summary>
            Gets or sets the parent object.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.IViewObject.InvalidateLayout(System.Boolean)">
            <summary>
            Invalidates the layout of this object, optionally cascading to child objects.
            </summary>
            <remarks>Property cache is invalidated immediately, including children when specifeid, also when events are suspended.</remarks>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.IViewObject.InvalidateView(System.Boolean)">
            <summary>
            Invalidates the view, causing it to be re-rendered.
            </summary>
            <remarks>If events are suspended the request is cached, then rendering will be delayed until events are resumed.</remarks>
            <returns>True if the operation was executed immediately, or false when cached.</returns>
        </member>
        <member name="T:CodeForDotNet.ComponentModel.NotifyPropertyChangedBase">
            <summary>
            Base object which provides a compact <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> implementation. Use the
            <see cref="M:CodeForDotNet.ComponentModel.NotifyPropertyChangedBase.SetProperty``1(``0@,``0,System.String,CodeForDotNet.ComponentModel.NotifyPropertyChangedBase.SetPropertyEventHandler{``0},CodeForDotNet.ComponentModel.NotifyPropertyChangedBase.SetPropertyEventHandler{``0})"/> method in your property setters
            to automatically test for equality, then set the new value and fire the <see cref="E:CodeForDotNet.ComponentModel.NotifyPropertyChangedBase.PropertyChanged"/> event when changed.
            </summary>
        </member>
        <member name="F:CodeForDotNet.ComponentModel.NotifyPropertyChangedBase._pendingPropertyChangeEvents">
            <summary>
            Pending events which will be fired then cleared when events are resumed.
            </summary>
        </member>
        <member name="F:CodeForDotNet.ComponentModel.NotifyPropertyChangedBase._synchronization">
            <summary>
            Synchronization context under which this object was created, e.g. parent UI dispatcher such as a DependencyObject context in XAML.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.NotifyPropertyChangedBase.#ctor">
            <summary>
            Creates an empty instance using the current synchronization context.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.NotifyPropertyChangedBase.#ctor(System.Threading.SynchronizationContext)">
            <summary>
            Creates an empty instance with the specified synchronization context.
            </summary>
        </member>
        <member name="T:CodeForDotNet.ComponentModel.NotifyPropertyChangedBase.SetPropertyEventHandler`1">
            <summary>
            Method signature used to call
            <see cref="M:CodeForDotNet.ComponentModel.NotifyPropertyChangedBase.SetProperty``1(``0@,``0,System.String,CodeForDotNet.ComponentModel.NotifyPropertyChangedBase.SetPropertyEventHandler{``0},CodeForDotNet.ComponentModel.NotifyPropertyChangedBase.SetPropertyEventHandler{``0})"/> before and after callbacks.
            </summary>
        </member>
        <member name="E:CodeForDotNet.ComponentModel.NotifyPropertyChangedBase.PropertyChanged">
            <summary>
            Fired when a property changes.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.NotifyPropertyChangedBase.InvokePropertyChanged(System.String)">
            <summary>
            Fires the <see cref="E:CodeForDotNet.ComponentModel.NotifyPropertyChangedBase.PropertyChanged"/> event or caches it when events are suspended.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.NotifyPropertyChangedBase.OnEventsResumed">
            <summary>
            Fires pending events when resumed.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.NotifyPropertyChangedBase.OnPropertyChanged(System.String)">
            <summary>
            Called when the <see cref="E:CodeForDotNet.ComponentModel.NotifyPropertyChangedBase.PropertyChanged"/> event occurs during resume events.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.NotifyPropertyChangedBase.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Sets a property with change checking and change notification.
            </summary>
            <typeparam name="T">Target type.</typeparam>
            <param name="target">Target reference, i.e. a backing field.</param>
            <param name="value">Value to set.</param>
            <param name="propertyName">Property name, must match public property name else bindings will not see change.</param>
            <returns>True when changed.</returns>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.NotifyPropertyChangedBase.SetProperty``1(``0@,``0,System.String,CodeForDotNet.ComponentModel.NotifyPropertyChangedBase.SetPropertyEventHandler{``0},CodeForDotNet.ComponentModel.NotifyPropertyChangedBase.SetPropertyEventHandler{``0})">
            <summary>
            Sets a property with change checking and change notification.
            </summary>
            <typeparam name="T">Target type.</typeparam>
            <param name="target">Target reference, i.e. a backing field.</param>
            <param name="value">Value to set.</param>
            <param name="propertyName">Property name, must match public property name else bindings will not see change.</param>
            <param name="beforeAssign">
            Optional callback which is invoked before assignment and before firing the changed event, with the old and new values, e.g. to un-hook events or
            deactivate the old value.
            </param>
            <param name="afterAssign">
            Optional callback which is invoked after assignment but before firing the changed event, with the old and new values, e.g. to hook events or clean-up
            the old value.
            </param>
            <returns>True when changed.</returns>
        </member>
        <member name="T:CodeForDotNet.ComponentModel.PropertyStore">
            <summary>
            Object containing uniquely identifiable properties, with intelligent change notification and event caching.
            </summary>
        </member>
        <member name="F:CodeForDotNet.ComponentModel.PropertyStore._changedProperties">
            <summary>
            List of all property IDs which changed during <see cref="M:CodeForDotNet.ComponentModel.IEventCache.SuspendEvents"/>.
            </summary>
        </member>
        <member name="F:CodeForDotNet.ComponentModel.PropertyStore._disposePropertyIDs">
            <summary>
            List of property IDs which will be automatically disposed when changed or this instance is disposed.
            </summary>
        </member>
        <member name="F:CodeForDotNet.ComponentModel.PropertyStore._properties">
            <summary>
            Property value storage.
            </summary>
        </member>
        <member name="F:CodeForDotNet.ComponentModel.PropertyStore._propertyNames">
            <summary>
            Property ID to name mappings, for compatibility with <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.PropertyStore.#ctor">
            <summary>
            Creates an instance.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.PropertyStore.Finalize">
            <summary>
            Overrides the finalizer to ensure any available dispose logic is called.
            </summary>
        </member>
        <member name="E:CodeForDotNet.ComponentModel.PropertyStore.Disposed">
            <summary>
            Fires after this object has been Disposed. Use this event to ensure all references are invalidated and any dependent objects are also Disposed or released.
            </summary>
        </member>
        <member name="E:CodeForDotNet.ComponentModel.PropertyStore.Disposing">
            <summary>
            Fires when the Dispose method is called on this object (except when garbage collected).
            </summary>
        </member>
        <member name="E:CodeForDotNet.ComponentModel.PropertyStore.PropertyChanged">
            <summary>
            Fired when properties of this object are changed, used to notify the standard .NET component model.
            </summary>
        </member>
        <member name="E:CodeForDotNet.ComponentModel.PropertyStore.PropertyStoreChanged">
            <summary>
            Fired when properties of this object are changed, used to notify our enhanced component model.
            </summary>
        </member>
        <member name="P:CodeForDotNet.ComponentModel.PropertyStore.IsDisposed">
            <summary>
            Indicated that this object has been disposed. When this flag is TRUE, do not use this object in any way.
            </summary>
        </member>
        <member name="P:CodeForDotNet.ComponentModel.PropertyStore.IsDisposing">
            <summary>
            Indicates that this object is committed to the process of disposing. When this flag is TRUE, do not pass any references or queue it for processing.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.PropertyStore.ClearProperty(System.Guid)">
            <summary>
            Clears a property value if it exists, disposing any current value when flagged.
            </summary>
            <param name="id">Property ID.</param>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.PropertyStore.ContainsProperty(System.Guid)">
            <summary>
            Checks if the property value exists.
            </summary>
            <param name="id">Property ID.</param>
            <returns>True when exists, otherwise false.</returns>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.PropertyStore.ContainsPropertyValue(System.Guid)">
            <summary>
            Checks if the property has a value.
            </summary>
            <param name="id">Property ID.</param>
            <returns>True when present, otherwise false.</returns>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.PropertyStore.Dispose">
            <summary>
            Frees all resources held by this object, immediately (rather than waiting for Garbage Collection). This can provide a performance increase and avoid
            memory congestion on objects that hold many or "expensive" (large) external resources.
            </summary>
            <remarks>
            First fires the Disposing event, which could cancel this operation. When not canceled, calls the <see cref="M:CodeForDotNet.ComponentModel.PropertyStore.Dispose(System.Boolean)"/> method, which should be
            overridden in inheriting classes to release their local resources. Finally fires the Disposed event. Use the IsDisposing and IsDisposed properties to
            avoid using objects that are about to or have been disposed.
            </remarks>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.PropertyStore.GetProperty``1(System.Guid)">
            <summary>
            Gets a property value.
            </summary>
            <param name="id">Property ID.</param>
            <returns>Property value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the ID does not exist.</exception>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.PropertyStore.GetProperty``1(System.Guid,``0)">
            <summary>
            Gets a property value, or a default when it doesn't exist.
            </summary>
            <param name="id">Property ID.</param>
            <param name="defaultValue">Default value.</param>
            <returns>Property value or the default when it doesn't exist.</returns>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.PropertyStore.GetPropertyIds">
            <summary>
            Gets all property IDs.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.PropertyStore.NotifyChange(CodeForDotNet.ComponentModel.IPropertyStore,CodeForDotNet.ComponentModel.PropertyStoreChangeEventArgs)">
            <summary>
            Notifies this object that a related <see cref="T:CodeForDotNet.ComponentModel.IPropertyStore"/> has changed.
            </summary>
            <param name="changed">Changed object instance.</param>
            <param name="change">Change details.</param>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.PropertyStore.SetProperties(System.Collections.Generic.IDictionary{System.Guid,System.Object})">
            <summary>
            Sets multiple properties.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="properties"/> parameter is null or empty.</exception>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.PropertyStore.SetProperty``1(System.Guid,``0)">
            <summary>
            Sets or adds a property value.
            </summary>
            <param name="id">Property ID.</param>
            <param name="value">Property value.</param>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.PropertyStore.Dispose(System.Boolean)">
            <summary>
            Inheritors implement the <see cref="M:CodeForDotNet.ComponentModel.PropertyStore.Dispose(System.Boolean)"/> method to dispose resources accordingly, depending on whether they have been called proactively
            or automatically via the finalizer.
            </summary>
            <param name="disposing">
            True when called proactively, i.e. Not during garbage collection. Managed resources should not be accessed when this is False, just references and
            unmanaged resources released.
            </param>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.PropertyStore.OnChangeNotification(CodeForDotNet.ComponentModel.IPropertyStore,CodeForDotNet.ComponentModel.PropertyStoreChangeEventArgs)">
            <summary>
            Handles change notification events, when this object is notified that a related view object has changed via the <see cref="M:CodeForDotNet.ComponentModel.PropertyStore.NotifyChange(CodeForDotNet.ComponentModel.IPropertyStore,CodeForDotNet.ComponentModel.PropertyStoreChangeEventArgs)"/> method.
            </summary>
            <remarks>
            Thread safe locking, <see cref="M:CodeForDotNet.ComponentModel.EventCache.SuspendEvents"/> and <see cref="M:CodeForDotNet.ComponentModel.EventCache.ResumeEvents"/> are handled by the caller. The base class
            implementation does nothing.
            </remarks>
            <param name="changed">Changed view object instance.</param>
            <param name="change">Change details.</param>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.PropertyStore.OnEventsResumed">
            <summary>
            Called when events are resumed the last time, i.e. is not fired when nested. Fires the <see cref="E:CodeForDotNet.ComponentModel.PropertyStore.PropertyStoreChanged"/> event when changes are pending.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.PropertyStore.OnPropertyChanged(CodeForDotNet.ComponentModel.PropertyStoreChangeEventArgs)">
            <summary>
            Fires the <see cref="E:CodeForDotNet.ComponentModel.PropertyStore.PropertyStoreChanged"/> and <see cref="E:CodeForDotNet.ComponentModel.PropertyStore.PropertyChanged"/> events.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.PropertyStore.RegisterProperty``1(System.Guid,System.String,``0,System.Boolean)">
            <summary>
            Registers a new property and default value and optional automatic call to <see cref="M:System.IDisposable.Dispose"/> when the value is changed or this
            object is disposed.
            </summary>
            <param name="id">Property ID for usage with this class.</param>
            <param name="name">Property name for compatibility with <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.</param>
            <param name="defaultValue">Default value.</param>
            <param name="dispose">Enables the automatic dispose option.</param>
            <remarks>Called by inheritors during initialization to register their properties. Does not trigger any events.</remarks>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.PropertyStore.DisposeProperty(System.Guid)">
            <summary>
            Disposes and clears property if flagged.
            </summary>
            <param name="id">Property ID.</param>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.PropertyStore.DoPropertyChanged(System.Guid)">
            <summary>
            Fires or caches the <see cref="E:CodeForDotNet.ComponentModel.PropertyStore.PropertyStoreChanged"/> and <see cref="E:CodeForDotNet.ComponentModel.PropertyStore.PropertyChanged"/> events.
            </summary>
        </member>
        <member name="T:CodeForDotNet.ComponentModel.PropertyStoreChangeEventArgs">
            <summary>
            Event arguments for the <see cref="E:CodeForDotNet.ComponentModel.IPropertyStore.PropertyStoreChanged"/> event.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.PropertyStoreChangeEventArgs.#ctor">
            <summary>
            Creates an empty instance.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.PropertyStoreChangeEventArgs.#ctor(System.Guid[])">
            <summary>
            Creates an instance with the specified values.
            </summary>
        </member>
        <member name="P:CodeForDotNet.ComponentModel.PropertyStoreChangeEventArgs.Keys">
            <summary>
            Names of the properties or relations which changed.
            </summary>
        </member>
        <member name="T:CodeForDotNet.ComponentModel.ViewObject">
            <summary>
            View object with intelligent property, data and event caching.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.ViewObject.#ctor">
            <summary>
            Creates an instance with no <see cref="P:CodeForDotNet.ComponentModel.ViewObject.Parent"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.ViewObject.#ctor(CodeForDotNet.ComponentModel.IViewObject)">
            <summary>
            Creates and instance with the specified <see cref="P:CodeForDotNet.ComponentModel.ViewObject.Parent"/>.
            </summary>
            <param name="parent">Parent.</param>
        </member>
        <member name="E:CodeForDotNet.ComponentModel.ViewObject.ParentChanged">
            <summary>
            Fired when the <see cref="P:CodeForDotNet.ComponentModel.ViewObject.Parent"/> is changed.
            </summary>
        </member>
        <member name="P:CodeForDotNet.ComponentModel.ViewObject.Children">
            <summary>
            Gets a collection of child objects.
            </summary>
        </member>
        <member name="P:CodeForDotNet.ComponentModel.ViewObject.Parent">
            <summary>
            Gets or sets the parent object.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.ViewObject.InvalidateLayout(System.Boolean)">
            <summary>
            Invalidates the layout of this object, optionally cascading to child objects.
            </summary>
            <param name="includeChildren">True to call <see cref="M:CodeForDotNet.ComponentModel.ViewObject.InvalidateLayout(System.Boolean)"/> on all children, recursively.</param>
            <remarks>Property cache is invalidated immediately, including children when specifeid, also when events are suspended.</remarks>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.ViewObject.InvalidateView(System.Boolean)">
            <summary>
            Invalidates the view, causing it to be re-rendered.
            </summary>
            <param name="includeChildren">True to call <see cref="M:CodeForDotNet.ComponentModel.ViewObject.InvalidateView(System.Boolean)"/> on all children, recursively.</param>
            <remarks>If events are suspended the request is cached, then rendering will be delayed until events are resumed.</remarks>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.ViewObject.OnChildPropertyChanged(System.Object,CodeForDotNet.ComponentModel.PropertyStoreChangeEventArgs)">
            <summary>
            Called when the <see cref="E:CodeForDotNet.ComponentModel.IPropertyStore.PropertyStoreChanged"/> event is fired on any of the <see cref="P:CodeForDotNet.ComponentModel.ViewObject.Children"/>.
            </summary>
            <param name="sender">Event initiator.</param>
            <param name="arguments">Event arguments.</param>
            <remarks>Inheritors must call this base class method first.</remarks>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.ViewObject.OnChildrenChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Hooks events and performs initialization when <see cref="P:CodeForDotNet.ComponentModel.ViewObject.Children"/> are added or removed.
            </summary>
            <param name="sender">Event initiator.</param>
            <param name="args">Event arguments.</param>
            <remarks>Inheritors must call this base class method first.</remarks>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.ViewObject.OnChildDisposed(System.Object,System.EventArgs)">
            <summary>
            Removes children when they are disposed.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.ViewObject.OnEventsResumed">
            <summary>
            Fires any cached events when events are resumed.
            </summary>
        </member>
        <member name="T:CodeForDotNet.ComponentModel.ViewObjectParentChangedEventArgs">
            <summary>
            Carries arguments for the <see cref="E:CodeForDotNet.ComponentModel.ViewObject.ParentChanged"/> event.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.ViewObjectParentChangedEventArgs.#ctor">
            <summary>
            Creates an empty instance.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ComponentModel.ViewObjectParentChangedEventArgs.#ctor(CodeForDotNet.ComponentModel.IViewObject,CodeForDotNet.ComponentModel.IViewObject)">
            <summary>
            Creates an instance with the specified values.
            </summary>
            <param name="oldParent">Old parent.</param>
            <param name="newParent">New parent.</param>
        </member>
        <member name="P:CodeForDotNet.ComponentModel.ViewObjectParentChangedEventArgs.NewParent">
            <summary>
            New parent.
            </summary>
        </member>
        <member name="P:CodeForDotNet.ComponentModel.ViewObjectParentChangedEventArgs.OldParent">
            <summary>
            Old parent.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Constants">
            <summary>
            Defines global constants.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Constants.XmlRootNamespace">
            <summary>
            XML namespace root for all schemas in this component.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Data.DataReaderExtensions">
            <summary>
            Extensions for <see cref="T:System.Data.IDataReader"/> based data readers, including the associated <see cref="T:System.Data.IDataRecord"/> interface.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.Get``1(System.Data.IDataRecord,System.String)">
            <summary>
            Reads a <see parmref="T"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type.</returns>
            <remarks>The type must match or have a cast operator, because no explicit conversion is performed.</remarks>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.Get``1(System.Data.IDataRecord,System.Int32,System.Globalization.CultureInfo)">
            <summary>
            Reads a <see parmref="T"/> from a record.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="ordinal">Column ordinal to read.</param>
            <param name="conversionLocale">
            Optional <see cref="T:System.Globalization.CultureInfo"/> locale override to use when type conversion is necessary. Only relevant when the types don't match and a specific
            locale is required. Leave null or unspecified to use the default thread locale.
            </param>
            <returns>Value of the correct type.</returns>
            <remarks>The type must match or have a cast operator, because no explicit conversion is performed.</remarks>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetBoolean(System.Data.IDataRecord,System.String)">
            <summary>
            Reads a <see cref="T:System.Boolean"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetDateTime(System.Data.IDataRecord,System.String)">
            <summary>
            Read a DateTime from a reader.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetDateTimeAsOffset(System.Data.IDataRecord,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Reads a nullable <see cref="T:System.DateTimeOffset"/> by column name with conversion to a <see cref="T:System.DateTimeOffset"/>, using either a specific or system
            time zone.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <param name="offset">
            Optional UTC offset to use during conversion. The system time zone is used when not specified, i.e. to covert from a source time which is local, do
            not specify an offset. To convert from a source time which is UTC, an offset of <see cref="F:System.TimeSpan.Zero"/> must be used.
            </param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
            <remarks>
            <para>This function facilitates standardization of dates with offset, when reading databases which do not take time zones into account.</para>
            <para>
            When the local system time zone is used it will only work reliably when running on systems in the same time zone as the original database system.
            Hence it should only be used during migration or when the geographical location is fixed.
            </para>
            </remarks>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetDateTimeAsOffset(System.Data.IDataRecord,System.Int32,System.Nullable{System.TimeSpan})">
            <summary>
            Reads a <see cref="T:System.DateTime"/> with conversion to a <see cref="T:System.DateTimeOffset"/>, using either a specific or system time zone.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="ordinal">Index of the column to read.</param>
            <param name="offset">
            Optional UTC offset to use during conversion. The system time zone is used when not specified, i.e. to covert from a source time which is local, do
            not specify an offset. To convert from a source time which is UTC, an offset of <see cref="F:System.TimeSpan.Zero"/> must be used.
            </param>
            <remarks>
            <para>This function facilitates standardization of dates with offset, when reading databases which do not take time zones into account.</para>
            <para>
            When the local system time zone is used it will only work reliably when running on systems in the same time zone as the original database system.
            Hence it should only be used during migration or when the geographical location is fixed.
            </para>
            </remarks>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetDateTimeOffset(System.Data.IDataRecord,System.String)">
            <summary>
            Reads a <see cref="T:System.DateTimeOffset"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetDouble(System.Data.IDataRecord,System.String)">
            <summary>
            Reads a <see cref="T:System.Double"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetInt16(System.Data.IDataRecord,System.String)">
            <summary>
            Reads an <see cref="T:System.Int16"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetInt32(System.Data.IDataRecord,System.String)">
            <summary>
            Reads an <see cref="T:System.Int32"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetInt64(System.Data.IDataRecord,System.String)">
            <summary>
            Reads an <see cref="T:System.Int64"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullable``1(System.Data.IDataRecord,System.String,``0)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <param name="defaultValue">
            Value to return when the column is <see cref="T:System.DBNull"/>. When not specified returns the default type value, e.g. empty value such as zero for
            int types, or null for reference types.
            </param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
            <remarks>The type must match or have a cast operator, because no explicit conversion is performed.</remarks>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullable``1(System.Data.IDataRecord,System.Int32,``0)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="ordinal">Column ordinal to read.</param>
            <param name="defaultValue">
            Value to return when the column is <see cref="T:System.DBNull"/>. When not specified returns the default type value, e.g. empty value such as zero for
            int types, or null for reference types.
            </param>
            <returns>Value of the correct type or default when <see cref="T:System.DBNull"/>.</returns>
            <remarks>The type must match or have a cast operator, because no explicit conversion is performed.</remarks>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableBoolean(System.Data.IDataRecord,System.String)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableBoolean(System.Data.IDataRecord,System.Int32)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="ordinal">Column ordinal to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableDateTime(System.Data.IDataRecord,System.String)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableDateTime(System.Data.IDataRecord,System.Int32)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="ordinal">Column ordinal to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableDateTimeAsOffset(System.Data.IDataRecord,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record by column name, with conversion to a <see cref="T:System.Nullable`1"/>, using
            either a specific or system time zone.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <param name="offset">
            Optional UTC offset to use during conversion. The system time zone is used when not specified, i.e. to covert from a source time which is local, do
            not specify an offset. To convert from a source time which is UTC, an offset of <see cref="F:System.TimeSpan.Zero"/> must be used.
            </param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
            <remarks>
            <para>This function facilitates standardization of dates with offset, when reading databases which do not take time zones into account.</para>
            <para>
            When the local system time zone is used it will only work reliably when running on systems in the same time zone as the original database system.
            Hence it should only be used during migration or when the geographical location is fixed.
            </para>
            </remarks>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableDateTimeAsOffset(System.Data.IDataRecord,System.Int32,System.Nullable{System.TimeSpan})">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> with conversion to a <see cref="T:System.Nullable`1"/>, using either a specific or system
            time zone.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="ordinal">Column ordinal to read.</param>
            <param name="offset">
            Optional UTC offset to use during conversion. The system time zone is used when not specified, i.e. to covert from a source time which is local, do
            not specify an offset. To convert from a source time which is UTC, an offset of <see cref="F:System.TimeSpan.Zero"/> must be used.
            </param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
            <remarks>
            <para>This function facilitates standardization of dates with offset, when reading databases which do not take time zones into account.</para>
            <para>
            When the local system time zone is used it will only work reliably when running on systems in the same time zone as the original database system.
            Hence it should only be used during migration or when the geographical location is fixed.
            </para>
            </remarks>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableDateTimeOffset(System.Data.IDataRecord,System.String)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableDateTimeOffset(System.Data.IDataRecord,System.Int32)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="ordinal">Column ordinal to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableDouble(System.Data.IDataRecord,System.String)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableDouble(System.Data.IDataRecord,System.Int32)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="ordinal">Column ordinal to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableInt16(System.Data.IDataRecord,System.String)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableInt16(System.Data.IDataRecord,System.Int32)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="ordinal">Column ordinal to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableInt32(System.Data.IDataRecord,System.String)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableInt32(System.Data.IDataRecord,System.Int32)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="ordinal">Column ordinal to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableInt64(System.Data.IDataRecord,System.String)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableInt64(System.Data.IDataRecord,System.Int32)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="ordinal">Column ordinal to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableSingle(System.Data.IDataRecord,System.String)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableSingle(System.Data.IDataRecord,System.Int32)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="ordinal">Column ordinal to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableString(System.Data.IDataRecord,System.String)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetNullableString(System.Data.IDataRecord,System.Int32)">
            <summary>
            Reads a <see cref="T:System.Nullable`1"/> from a record
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="ordinal">Column ordinal to read.</param>
            <returns>Value of the correct type or null when <see cref="T:System.DBNull"/>.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetSingle(System.Data.IDataRecord,System.String)">
            <summary>
            Reads a <see cref="T:System.Single"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.DataReaderExtensions.GetString(System.Data.IDataRecord,System.String)">
            <summary>
            Reads a <see cref="T:System.String"/> from a record by column name.
            </summary>
            <param name="reader"><see cref="T:System.Data.IDataRecord"/> to read from.</param>
            <param name="column">Column name to read.</param>
            <returns>Value of the correct type.</returns>
        </member>
        <member name="T:CodeForDotNet.Data.DataSetChangeLog">
            <summary>
            DataSet change log - monitors DataSet changes to facilitate, roll-back and roll-forward functionality plus a descriptive change list, e.g. to support
            Undo/Redo capability.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Data.DataSetChangeLog._changeLog">
            <summary>
            The change log. Contains the details of all previous actions, available for Rollback, and any future action, available for roll-forward.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Data.DataSetChangeLog._logIndex">
            <summary>
            Current entry in the change log. Unless there are any redo actions available, this will always be the last entry in the array. When the change log is
            empty, the index is -1.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.DataSetChangeLog.#ctor(System.Data.DataSet)">
            <summary>
            Creates an instance to monitor the specified DataSet.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.DataSetChangeLog.Data">
            <summary>
            DataSet which this change log belongs to.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.DataSetChangeLog.SyncRoot">
            <summary>
            Thread synchronization object.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.DataSetChangeLog.Checkpoint(System.String)">
            <summary>
            Commits the current changes since the last checkpoint to the ChangeLog, making it available for Rollback as a unit.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.DataSetChangeLog.GetRedoList">
            <summary>
            Gets a list of names for the changes available to roll-forwards. The list is in chronological order, with the next change at the beginning and last
            change at the end.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.DataSetChangeLog.GetUndoList">
            <summary>
            Gets a list of names for the changes available to roll-back. The list is in chronological order, with the oldest change at the beginning and last
            change at the end.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.DataSetChangeLog.Redo(System.Int32)">
            <summary>
            Rolls the DataSet forwards by the specified number of checkpoint "steps".
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.DataSetChangeLog.Undo">
            <summary>
            Rolls-back the DataSet by 1 step.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.DataSetChangeLog.Undo(System.Int32)">
            <summary>
            Rolls-back the DataSet by the specified number of checkpoint "steps".
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.DataSetChangeLog.Dispose(System.Boolean)">
            <summary>
            Frees resources used by this object.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.DataSetChangeLog.GetPrimaryKeyFilterExpression(System.Data.DataRow)">
            <summary>
            Builds a DataRow filter expression statement that can be used to Select() the row uniquely within it's DataTable. Requires a primary key to be
            defined in the table schema.
            </summary>
            <param name="row">Row to use as a model for the filter expression. Primary key values will be taken from here.</param>
            <returns>Filter expression.</returns>
        </member>
        <member name="T:CodeForDotNet.Data.DataSetChangeLogEntry">
            <summary>
            Contains information about a change in the Change Log.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.DataSetChangeLogEntry.#ctor(System.DateTime,System.String,System.Data.DataSet)">
            <summary>
            Creates a new instance of this structure containing the specified data.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.DataSetChangeLogEntry.Changes">
            <summary>
            Snapshot of the changes, including DataRowVersion.Original data needed to Rollback, and DataRowVersion.Current needed to roll-forward.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.DataSetChangeLogEntry.Name">
            <summary>
            Short name of the action.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.DataSetChangeLogEntry.TimeStamp">
            <summary>
            Time-stamp at which the action occurred.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.DataSetChangeLogEntry.Dispose(System.Boolean)">
            <summary>
            Frees resources used by this object.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Data.DataSetExtensions">
            <summary>
            Extensions to the <see cref="T:System.Data.DataSet"/> class.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.DataSetExtensions.GetErrors(System.Data.DataSet)">
            <summary>
            Gets all errors recorded within a DataSet.
            </summary>
            <remarks>
            Useful because the default behavior of operations such as DataAdapter failed updates is to return a generic error and not the specifics. This method
            can be used to provide full error detail in logs or messages, or as a static call during debugging when no error handling exists.
            </remarks>
            <returns>Collection of error messages from all tables and rows in the DataSet.</returns>
        </member>
        <member name="T:CodeForDotNet.Data.ErrorReportData">
            <summary>
            Error data used to report failures to a service.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.ErrorReportData.ErrorTypeFullName">
            <summary>
            Optional full type name of the exception which occurred.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.ErrorReportData.EventDate">
            <summary>
            Date and time when the event occurred.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.ErrorReportData.Message">
            <summary>
            Message.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.ErrorReportData.SourceAssemblyName">
            <summary>
            Source assembly name including fully qualified name, version and any other attributes such as public key.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.ErrorReportData.SourceId">
            <summary>
            Unique identifier used to group reports from the same source.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.ErrorReportData.StackTrace">
            <summary>
            Optional stack trace.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.ErrorReportData.op_Inequality(CodeForDotNet.Data.ErrorReportData,CodeForDotNet.Data.ErrorReportData)">
            <summary>
            Tests two objects of this type for in-equality by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.ErrorReportData.op_Equality(CodeForDotNet.Data.ErrorReportData,CodeForDotNet.Data.ErrorReportData)">
            <summary>
            Tests two objects of this type for equality by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.ErrorReportData.Equals(System.Object)">
            <summary>
            Compares this object with another by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.ErrorReportData.GetHashCode">
            <summary>
            Gets an XOR based hash code based on the contents of this object.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Data.GuidDataKey">
            <summary>
            Error data used to report failures to a service.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.GuidDataKey.Id">
            <summary>
            Unique identifier used to group reports from the same source.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.GuidDataKey.op_Inequality(CodeForDotNet.Data.GuidDataKey,CodeForDotNet.Data.GuidDataKey)">
            <summary>
            Tests two objects of this type for in-equality by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.GuidDataKey.op_Equality(CodeForDotNet.Data.GuidDataKey,CodeForDotNet.Data.GuidDataKey)">
            <summary>
            Tests two objects of this type for equality by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.GuidDataKey.Equals(System.Object)">
            <summary>
            Compares this object with another by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.GuidDataKey.GetHashCode">
            <summary>
            Gets an XOR based hash code based on the contents of this object.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Data.Schedule">
            <summary>
            Defines a schedule with multiple include and exclude patterns, supporting recurrence and durations.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Data.Schedule.XmlNamespace">
            <summary>
            XML namespace.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Data.Schedule.XmlRootName">
            <summary>
            XML root element name.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Data.Schedule.XmlTypeName">
            <summary>
            XML type name.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.Schedule.#ctor">
            <summary>
            Creates an empty instance.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.Schedule.Description">
            <summary>
            Description, optional. The user can give a short description for the schedule.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.Schedule.Excludes">
            <summary>
            Times at which this schedule is must not occur. Allows special times to be excluded from the <see cref="P:CodeForDotNet.Data.Schedule.Includes"/>.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.Schedule.ExcludesSpecified">
            <summary>
            Omits the <see cref="P:CodeForDotNet.Data.Schedule.Excludes"/> property from XML serialization when it is empty.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.Schedule.Includes">
            <summary>
            Times at which this schedule occurs. Must be combined with the <see cref="P:CodeForDotNet.Data.Schedule.Excludes"/> to decide if it is due at any particular time.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.Schedule.IncludesSpecified">
            <summary>
            Omits the <see cref="P:CodeForDotNet.Data.Schedule.Includes"/> property from XML serialization when it is empty.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.Schedule.op_Inequality(CodeForDotNet.Data.Schedule,CodeForDotNet.Data.Schedule)">
            <summary>
            Tests two objects of this type for inequality by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.Schedule.op_Equality(CodeForDotNet.Data.Schedule,CodeForDotNet.Data.Schedule)">
            <summary>
            Tests two objects of this type for equality by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.Schedule.Clear">
            <summary>
            Clears all items from the schedule.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.Schedule.Equals(System.Object)">
            <summary>
            Compares this object with another by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.Schedule.GetHashCode">
            <summary>
            Returns a hash-code based on the current value of this object.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.Schedule.GetNext(System.DateTimeOffset,System.Int32)">
            <summary>
            Returns the next occurrence after the specified date, taking into account both <see cref="P:CodeForDotNet.Data.Schedule.Includes"/> and <see cref="P:CodeForDotNet.Data.Schedule.Excludes"/>.
            </summary>
            <param name="utcDate">
            Date to check in UTC, usually <see cref="P:System.DateTime.UtcNow"/> or the last event date when it is required to know if events are missed.
            </param>
            <param name="duration">Duration in minutes. Must be less than each include duration otherwise it will never match.</param>
            <returns>Next scheduled date or null when the schedule has ended.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.Schedule.ToString">
            <summary>
            Returns a string describing this schedule entry, using the <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.Schedule.ToString(System.Globalization.CultureInfo)">
            <summary>
            Returns a string describing this schedule entry, using the specified <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Data.ScheduleItem">
            <summary>
            Schedule item; describes a single or recurring point in time and a duration in which the item is valid.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Data.ScheduleItem.XmlNamespace">
            <summary>
            XML namespace.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Data.ScheduleItem.XmlRootName">
            <summary>
            XML root element name.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Data.ScheduleItem.XmlTypeName">
            <summary>
            XML type name.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.ScheduleItem.#ctor">
            <summary>
            Creates an empty instance.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.ScheduleItem.Days">
            <summary>
            Days of week, when one or more days are relevant.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.ScheduleItem.DaysSpecified">
            <summary>
            Omits the <see cref="P:CodeForDotNet.Data.ScheduleItem.Days"/> property from XML serialization when it is empty.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.ScheduleItem.Duration">
            <summary>
            Duration in minutes.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.ScheduleItem.End">
            <summary>
            Date and time when the schedule ends, taking into account duration and all occurrences. Will be null when this item has <see cref="P:CodeForDotNet.Data.ScheduleItem.Recurrence"/> with
            an unlimited number of <see cref="P:CodeForDotNet.Data.ScheduleItem.Occurrences"/>.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.ScheduleItem.Interval">
            <summary>
            Gets or sets the recurrence interval.
            </summary>
            <remarks>
            Range depends on <see cref="P:CodeForDotNet.Data.ScheduleItem.Recurrence"/>. None = 0. Hourly = 0-23 hours (for 24+ hours use daily recurrence). Daily = 0-30 days (for 31+ days use
            monthly recurrence). Weekly = 0-51 weeks (for 52+ weeks use yearly recurrence). Months = 0-11 months (for 11+ months use yearly recurrence). Yearly =
            0-4 years (more than 4 years is unrealistic, e.g. 4 could be used for leap years).
            </remarks>
        </member>
        <member name="P:CodeForDotNet.Data.ScheduleItem.IntervalSpecified">
            <summary>
            Omits the <see cref="P:CodeForDotNet.Data.ScheduleItem.Interval"/> property from XML serialization when it is empty.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.ScheduleItem.Occurrences">
            <summary>
            Number of occurrences of this item. Null means unlimited.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.ScheduleItem.OccurrencesSpecified">
            <summary>
            Omits the <see cref="P:CodeForDotNet.Data.ScheduleItem.Occurrences"/> property from XML serialization when it is empty.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.ScheduleItem.Offset">
            <summary>
            Optional offset when a relative recurrence is required, e.g. last day of a month cannot be expressed with day numbers as each month varies in length.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.ScheduleItem.OffsetSpecified">
            <summary>
            Omits the <see cref="P:CodeForDotNet.Data.ScheduleItem.Offset"/> property from XML serialization when it is empty.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.ScheduleItem.Recurrence">
            <summary>
            Recurrence of the schedule, or null for a one-off event.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.ScheduleItem.RecurrenceSpecified">
            <summary>
            Omits the <see cref="P:CodeForDotNet.Data.ScheduleItem.Recurrence"/> property from XML serialization when it is default.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.ScheduleItem.Start">
            <summary>
            Date and time of a single occurrence, or start date and time of a recurring schedule item.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Data.ScheduleItem.TimeZoneId">
            <summary>
            ID of the time zone in which this schedule item was defined. All dates, times, days, months and years expressed this schedule are expressed in this
            time zone (normally the user's local time). The time zone is applied to current time in order to compare whether it matches the schedule or not. This
            must work on different servers across the world than where the user is located, especially significant for global intranet and internet applications,
            e.g. an item scheduled in the UK at 23:30 on Tuesday needs to be processed at 00:30 on Wednesday by server in Germany.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.ScheduleItem.op_Inequality(CodeForDotNet.Data.ScheduleItem,CodeForDotNet.Data.ScheduleItem)">
            <summary>
            Tests two objects of this type for inequality by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.ScheduleItem.op_Equality(CodeForDotNet.Data.ScheduleItem,CodeForDotNet.Data.ScheduleItem)">
            <summary>
            Tests two objects of this type for equality by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.ScheduleItem.Contains(System.DateTimeOffset,System.Int32)">
            <summary>
            Checks if the specified time span lies within this schedule.
            </summary>
            <param name="utcDate">Date to check in UTC, usually <see cref="P:System.DateTime.UtcNow"/>.</param>
            <param name="duration">Duration in minutes.</param>
        </member>
        <member name="M:CodeForDotNet.Data.ScheduleItem.Equals(System.Object)">
            <summary>
            Compares this object with another by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.ScheduleItem.GetHashCode">
            <summary>
            Returns a hash-code based on the current value of this object.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.ScheduleItem.GetNext(System.DateTimeOffset)">
            <summary>
            Returns the next occurrence after the specified date.
            </summary>
            <param name="date">Date to check.</param>
            <returns>Next scheduled date in UTC or null when the schedule has ended.</returns>
        </member>
        <member name="M:CodeForDotNet.Data.ScheduleItem.ToString">
            <summary>
            Returns a string describing the schedule item, using the <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.ScheduleItem.ToString(System.Globalization.CultureInfo)">
            <summary>
            Returns a string describing this schedule item, using the specified <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Data.ScheduleItemCollection">
            <summary>
            Collection of <see cref="T:CodeForDotNet.Data.ScheduleItem"/>.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Data.ScheduleItemCollection.XmlNamespace">
            <summary>
            XML namespace.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Data.ScheduleItemCollection.XmlRootName">
            <summary>
            XML root element name.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Data.ScheduleItemCollection.XmlTypeName">
            <summary>
            XML type name.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.ScheduleItemCollection.#ctor">
            <summary>
            Creates an empty collection.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.ScheduleItemCollection.#ctor(System.Collections.Generic.IList{CodeForDotNet.Data.ScheduleItem})">
            <summary>
            Creates an instance based on an existing list.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.ScheduleItemCollection.op_Inequality(CodeForDotNet.Data.ScheduleItemCollection,CodeForDotNet.Data.ScheduleItemCollection)">
            <summary>
            Tests two objects of this type for inequality by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.ScheduleItemCollection.op_Equality(CodeForDotNet.Data.ScheduleItemCollection,CodeForDotNet.Data.ScheduleItemCollection)">
            <summary>
            Tests two objects of this type for equality by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.ScheduleItemCollection.Equals(System.Object)">
            <summary>
            Compares this object with another by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.ScheduleItemCollection.GetHashCode">
            <summary>
            Returns a hash-code based on the current value of this object.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.ScheduleItemCollection.ToString">
            <summary>
            Returns a string describing the schedule items, using the <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Data.ScheduleItemCollection.ToString(System.Globalization.CultureInfo)">
            <summary>
            Returns a string describing this schedule items, using the specified <see cref="T:System.Globalization.CultureInfo"/>.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Data.ScheduleItemOffset">
            <summary>
            Specifies an offset to make a schedule item relative to the start or end of a recurrence instance.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Data.ScheduleItemOffset.None">
            <summary>
            No offset, e.g. a specific day of a month, a specific day and month of a year.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Data.ScheduleItemOffset.First">
            <summary>
            First instance, e.g. first day of a month, first Wednesday of a month.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Data.ScheduleItemOffset.Second">
            <summary>
            Second instance, e.g. second Monday in a month.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Data.ScheduleItemOffset.Third">
            <summary>
            Third instance, e.g. third Tuesday in a month.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Data.ScheduleItemOffset.Last">
            <summary>
            Last instance, e.g. last Wednesday of a month.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Data.ScheduleItemRecurrence">
            <summary>
            Pattern of recurrence for a <see cref="T:CodeForDotNet.Data.ScheduleItem"/>, quantifying its <see cref="P:CodeForDotNet.Data.ScheduleItem.Interval"/>, e.g. an interval of 3 with recurrence of
            <see cref="F:CodeForDotNet.Data.ScheduleItemRecurrence.Daily"/> means "every 3 days", whereas the same interval of 3 with recurrence of <see cref="F:CodeForDotNet.Data.ScheduleItemRecurrence.Monthly"/> means "every 3 months".
            </summary>
        </member>
        <member name="F:CodeForDotNet.Data.ScheduleItemRecurrence.None">
            <summary>
            Once, i.e. no recurrence.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Data.ScheduleItemRecurrence.Hourly">
            <summary>
            Every # hours (depends on interval).
            </summary>
        </member>
        <member name="F:CodeForDotNet.Data.ScheduleItemRecurrence.Daily">
            <summary>
            Every # days (depends on interval).
            </summary>
        </member>
        <member name="F:CodeForDotNet.Data.ScheduleItemRecurrence.Weekly">
            <summary>
            Every # weeks (depends on interval).
            </summary>
        </member>
        <member name="F:CodeForDotNet.Data.ScheduleItemRecurrence.Monthly">
            <summary>
            Every # months (depends on interval).
            </summary>
        </member>
        <member name="F:CodeForDotNet.Data.ScheduleItemRecurrence.Yearly">
            <summary>
            Every # years (depends on interval).
            </summary>
        </member>
        <member name="T:CodeForDotNet.DateTimeExtensions">
            <summary>
            Extends the <see cref="T:System.DateTime"/> class.
            </summary>
        </member>
        <member name="M:CodeForDotNet.DateTimeExtensions.GetEndOfDay(System.DateTime)">
            <summary>
            Gets the end of the day, accurate to the millisecond.
            </summary>
        </member>
        <member name="M:CodeForDotNet.DateTimeExtensions.GetEndOfDay(System.DateTimeOffset)">
            <summary>
            Gets the end of the day, accurate to the millisecond.
            </summary>
        </member>
        <member name="M:CodeForDotNet.DateTimeExtensions.GetEndOfMonth(System.DateTime)">
            <summary>
            Gets the end of the month, accurate to the millisecond.
            </summary>
        </member>
        <member name="M:CodeForDotNet.DateTimeExtensions.GetEndOfMonth(System.DateTimeOffset)">
            <summary>
            Gets the end of the month, accurate to the millisecond.
            </summary>
        </member>
        <member name="M:CodeForDotNet.DateTimeExtensions.GetStartOfMonth(System.DateTime)">
            <summary>
            Gets the start of the month.
            </summary>
        </member>
        <member name="M:CodeForDotNet.DateTimeExtensions.GetStartOfMonth(System.DateTimeOffset)">
            <summary>
            Gets the start of the month.
            </summary>
        </member>
        <member name="M:CodeForDotNet.DateTimeExtensions.SetDate(System.DateTime,System.DateTime)">
            <summary>
            Sets the <see cref="P:System.DateTime.Date"/> value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.DateTimeExtensions.SetDate(System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            Sets the <see cref="P:System.DateTimeOffset.Date"/> value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.DateTimeExtensions.SetTime(System.DateTime,System.TimeSpan)">
            <summary>
            Sets the <see cref="P:System.DateTime.TimeOfDay"/> value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.DateTimeExtensions.SetTime(System.DateTimeOffset,System.TimeSpan)">
            <summary>
            Sets the <see cref="P:System.DateTimeOffset.TimeOfDay"/> value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.DateTimeExtensions.ToLocalTime(System.Nullable{System.DateTime})">
            <summary>
            Converts a nullable <see cref="T:System.DateTime"/> to local time, if it is not null, otherwise does nothing. Used to eliminate
            <see cref="P:System.Nullable`1.HasValue"/> checking code and avoid exceptions when null.
            </summary>
        </member>
        <member name="M:CodeForDotNet.DateTimeExtensions.ToLocalTime(System.Nullable{System.DateTimeOffset})">
            <summary>
            Converts a nullable <see cref="T:System.DateTimeOffset"/> to local time, if it is not null, otherwise does nothing. Used to eliminate
            <see cref="P:System.Nullable`1.HasValue"/> checking code and avoid exceptions when null.
            </summary>
        </member>
        <member name="M:CodeForDotNet.DateTimeExtensions.ToUniversalTime(System.Nullable{System.DateTime})">
            <summary>
            Converts a nullable <see cref="T:System.DateTime"/> to universal time, if it is not null, otherwise does nothing. Used to eliminate
            <see cref="P:System.Nullable`1.HasValue"/> checking code and avoid exceptions when null.
            </summary>
        </member>
        <member name="M:CodeForDotNet.DateTimeExtensions.ToUniversalTime(System.Nullable{System.DateTimeOffset})">
            <summary>
            Converts a nullable <see cref="T:System.DateTimeOffset"/> to universal time, if it is not null, otherwise does nothing. Used to eliminate
            <see cref="P:System.Nullable`1.HasValue"/> checking code and avoid exceptions when null.
            </summary>
        </member>
        <member name="M:CodeForDotNet.DateTimeExtensions.Trim(System.DateTime,System.Int64)">
            <summary>
            Trims to a specific accuracy. Use TimeSpan.TicksPer... constants, e.g. <see cref="F:System.TimeSpan.TicksPerSecond"/> to round to the nearest second.
            </summary>
        </member>
        <member name="M:CodeForDotNet.DateTimeExtensions.Trim(System.DateTimeOffset,System.Int64)">
            <summary>
            Trims to a specific accuracy. Use TimeSpan.TicksPer... constants, e.g. <see cref="F:System.TimeSpan.TicksPerSecond"/> to round to the nearest second.
            </summary>
        </member>
        <member name="M:CodeForDotNet.DateTimeExtensions.TruncateToMilliseconds(System.DateTimeOffset)">
            <summary>
            Truncates the accuracy of a <see cref="T:System.DateTimeOffset"/> from the default 100 nanosecond accuracy to the more common lesser accuracy of milliseconds,
            e.g. JSON, JavaScript and UNIX compatible.
            </summary>
        </member>
        <member name="M:CodeForDotNet.DateTimeExtensions.TruncateToMilliseconds(System.DateTime)">
            <summary>
            Truncates the accuracy of a <see cref="T:System.DateTime"/> from the default 100 nanosecond accuracy to the more common lesser accuracy of milliseconds, e.g.
            JSON, JavaScript and UNIX compatible.
            </summary>
        </member>
        <member name="T:CodeForDotNet.DaysOfWeek">
            <summary>
            Enumeration representing days of the week as bit flags, starting with Monday at the LSB.
            </summary>
        </member>
        <member name="F:CodeForDotNet.DaysOfWeek.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:CodeForDotNet.DaysOfWeek.Sunday">
            <summary>
            Sunday.
            </summary>
        </member>
        <member name="F:CodeForDotNet.DaysOfWeek.Monday">
            <summary>
            Monday.
            </summary>
        </member>
        <member name="F:CodeForDotNet.DaysOfWeek.Tuesday">
            <summary>
            Tuesday.
            </summary>
        </member>
        <member name="F:CodeForDotNet.DaysOfWeek.Wednesday">
            <summary>
            Wednesday.
            </summary>
        </member>
        <member name="F:CodeForDotNet.DaysOfWeek.Thursday">
            <summary>
            Thursday.
            </summary>
        </member>
        <member name="F:CodeForDotNet.DaysOfWeek.Friday">
            <summary>
            Friday.
            </summary>
        </member>
        <member name="F:CodeForDotNet.DaysOfWeek.Saturday">
            <summary>
            Saturday.
            </summary>
        </member>
        <member name="F:CodeForDotNet.DaysOfWeek.Everyday">
            <summary>
            Everyday.
            </summary>
        </member>
        <member name="F:CodeForDotNet.DaysOfWeek.Weekdays">
            <summary>
            Weekdays (Monday to Friday).
            </summary>
        </member>
        <member name="F:CodeForDotNet.DaysOfWeek.Weekend">
            <summary>
            Weekend (Saturday and Sunday).
            </summary>
        </member>
        <member name="T:CodeForDotNet.DaysOfWeekExtensions">
            <summary>
            Extends <see cref="T:CodeForDotNet.DaysOfWeek"/> and <see cref="T:CodeForDotNet.DaysOfWeek"/> types to help with conversion.
            </summary>
        </member>
        <member name="M:CodeForDotNet.DaysOfWeekExtensions.GetFirst(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets the first specified weekday of the month.
            </summary>
        </member>
        <member name="M:CodeForDotNet.DaysOfWeekExtensions.GetFirst(System.DateTimeOffset,System.DayOfWeek)">
            <summary>
            Gets the first specified weekday of the month.
            </summary>
        </member>
        <member name="M:CodeForDotNet.DaysOfWeekExtensions.GetLast(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets the last specified weekday of the month.
            </summary>
        </member>
        <member name="M:CodeForDotNet.DaysOfWeekExtensions.GetLast(System.DateTimeOffset,System.DayOfWeek)">
            <summary>
            Gets the last specified weekday of the month.
            </summary>
        </member>
        <member name="M:CodeForDotNet.DaysOfWeekExtensions.GetNext(System.DateTime,CodeForDotNet.DaysOfWeek)">
            <summary>
            Gets the next date on any of the specified weekdays.
            </summary>
        </member>
        <member name="M:CodeForDotNet.DaysOfWeekExtensions.GetNext(System.DateTimeOffset,CodeForDotNet.DaysOfWeek)">
            <summary>
            Gets the next date on any of the specified weekdays.
            </summary>
        </member>
        <member name="M:CodeForDotNet.DaysOfWeekExtensions.GetNext(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets the next specified weekday.
            </summary>
        </member>
        <member name="M:CodeForDotNet.DaysOfWeekExtensions.GetNext(System.DateTimeOffset,System.DayOfWeek)">
            <summary>
            Gets the next specified weekday.
            </summary>
        </member>
        <member name="M:CodeForDotNet.DaysOfWeekExtensions.ToArray(CodeForDotNet.DaysOfWeek)">
            <summary>
            Converts <see cref="T:CodeForDotNet.DaysOfWeek"/> flags to a collection of <see cref="T:System.DayOfWeek"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.DaysOfWeekExtensions.ToDaysOfWeek(System.DayOfWeek)">
            <summary>
            Converts a <see cref="T:System.DayOfWeek"/> to an <see cref="T:CodeForDotNet.DaysOfWeek"/> flag.
            </summary>
        </member>
        <member name="M:CodeForDotNet.DaysOfWeekExtensions.ToStringArray(CodeForDotNet.DaysOfWeek)">
            <summary>
            Converts <see cref="T:CodeForDotNet.DaysOfWeek"/> flags to a collection of strings for each day of the week.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Diagnostics.ActivityIdTraceFilter">
            <summary>
            Filters trace events for a specific activity ID.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Diagnostics.ActivityIdTraceFilter.#ctor(System.Guid)">
            <summary>
            Creates an instance to filter all events except the specified activity ID.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Diagnostics.ActivityIdTraceFilter.ActivityId">
            <summary>
            Activity ID to capture (all others are filtered).
            </summary>
        </member>
        <member name="M:CodeForDotNet.Diagnostics.ActivityIdTraceFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])">
            <summary>
            Filters events.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Diagnostics.FileWriterTraceListener">
            <summary>
            Writes trace output to a file, supporting environment variables in the filename and lazy open of the file.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Diagnostics.FileWriterTraceListener._fileName">
            <summary>
            Filename to write to.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Diagnostics.FileWriterTraceListener._stream">
            <summary>
            Output file stream.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Diagnostics.FileWriterTraceListener.#ctor(System.String)">
            <summary>
            Creates the object.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Diagnostics.FileWriterTraceListener.Close">
            <summary>
            Closes the output stream (if open).
            </summary>
        </member>
        <member name="M:CodeForDotNet.Diagnostics.FileWriterTraceListener.Flush">
            <summary>
            Flushes any buffered data to the file (if open).
            </summary>
        </member>
        <member name="M:CodeForDotNet.Diagnostics.FileWriterTraceListener.Write(System.String)">
            <summary>
            Writes to the output stream.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Diagnostics.FileWriterTraceListener.WriteLine(System.String)">
            <summary>
            Writes to the output stream followed by a new line.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Diagnostics.FileWriterTraceListener.Dispose(System.Boolean)">
            <summary>
            Cleans-up resources.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Diagnostics.FileWriterTraceListener.OpenFile">
            <summary>
            Opens the stream when it is needed (lazy open).
            </summary>
        </member>
        <member name="T:CodeForDotNet.Diagnostics.ProcessExtensions">
            <summary>
            Extends the <see cref="T:System.Diagnostics.Process"/> class.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Diagnostics.ProcessExtensions.Run(System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
            Creates and executes a process with timeout, capturing the results.
            </summary>
            <param name="program">Program to execute. Must not be null</param>
            <param name="parameters">Parameters to pass. Can be null. Can contain environment variables</param>
            <param name="workingDirectory">Working directory to use. Can be relative. Null or empty means current directory.</param>
            <param name="timeout">Optional timeout in seconds.</param>
            <returns><see cref="T:CodeForDotNet.Diagnostics.ProcessResult"/> with set ReturnCode, Output, Errors, TimedOut</returns>
        </member>
        <member name="T:CodeForDotNet.Diagnostics.ProcessResult">
            <summary>
            Holds information generated by running a <see cref="T:System.Diagnostics.Process"/>.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Diagnostics.ProcessResult.Errors">
            <summary>
            Console error output (if any).
            </summary>
            <remarks>Windowed applications will normally have no console output.</remarks>
        </member>
        <member name="P:CodeForDotNet.Diagnostics.ProcessResult.Output">
            <summary>
            Console standard output (if any).
            </summary>
            <remarks>Windowed applications will normally have no console output.</remarks>
        </member>
        <member name="P:CodeForDotNet.Diagnostics.ProcessResult.ReturnCode">
            <summary>
            Return code, when the process exited normally.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Diagnostics.ProcessResult.TimedOut">
            <summary>
            Indicates the process timed-out, in which case the <see cref="P:CodeForDotNet.Diagnostics.ProcessResult.ReturnCode"/> is null.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Diagnostics.StopwatchExtensions">
            <summary>
            Extensions to the <see cref="T:System.Diagnostics.Stopwatch"/> class.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Diagnostics.StopwatchExtensions.TicksPerMicrosecond">
            <summary>
            Number of <see cref="P:System.Diagnostics.Stopwatch.ElapsedTicks"/> in a microsecond.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Diagnostics.StopwatchExtensions.ElapsedMicroseconds(System.Diagnostics.Stopwatch)">
            <summary>
            Gets the total elapsed time in microseconds.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Diagnostics.StopwatchExtensions.GetTimestampInMicroseconds">
            <summary>
            Gets the total elapsed time in microseconds.
            </summary>
        </member>
        <member name="T:CodeForDotNet.DisposableObject">
            <summary>
            Provides a base object which provides greater control over object lifetime and memory management.
            </summary>
        </member>
        <member name="M:CodeForDotNet.DisposableObject.Finalize">
            <summary>
            Overrides the finalizer to ensure any available dispose logic is called.
            </summary>
        </member>
        <member name="E:CodeForDotNet.DisposableObject.Disposed">
            <summary>
            Fires after this object has been Disposed. Use this event to ensure all references are invalidated and any dependent objects are also Disposed or released.
            </summary>
        </member>
        <member name="E:CodeForDotNet.DisposableObject.Disposing">
            <summary>
            Fires when the Dispose method is called on this object (except when garbage collected).
            </summary>
        </member>
        <member name="P:CodeForDotNet.DisposableObject.IsDisposed">
            <summary>
            Indicated that this object has been disposed. When this flag is true, do not use this object in any way.
            </summary>
        </member>
        <member name="P:CodeForDotNet.DisposableObject.IsDisposing">
            <summary>
            Indicates that this object is committed to the process of disposing. When this flag is true, do not pass any references or queue it for processing.
            </summary>
        </member>
        <member name="M:CodeForDotNet.DisposableObject.Dispose">
            <summary>
            Frees all resources held by this object, immediately (rather than waiting for Garbage Collection). This can provide a performance increase and avoid
            memory congestion on objects that hold many or "expensive" (large) external resources.
            </summary>
            <remarks>
            First fires the Disposing event, which could cancel this operation. When not canceled, calls the <see cref="M:CodeForDotNet.DisposableObject.Dispose(System.Boolean)"/> method, which should be
            overridden in inheriting classes to release their local resources. Finally fires the Disposed event. Use the IsDisposing and IsDisposed properties to
            avoid using objects that are about to or have been disposed.
            </remarks>
        </member>
        <member name="M:CodeForDotNet.DisposableObject.Dispose(System.Boolean)">
            <summary>
            Inheritors implement the <see cref="M:CodeForDotNet.DisposableObject.Dispose(System.Boolean)"/> method to dispose resources accordingly, depending on whether they have been called proactively
            or automatically via the finalizer.
            </summary>
            <param name="disposing">
            True when called proactively, i.e. Not during garbage collection. Managed resources should not be accessed when this is False, just references and
            unmanaged resources released.
            </param>
        </member>
        <member name="T:CodeForDotNet.Drawing.BrushData">
            <summary>
            Brush data.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.BrushData.#ctor">
            <summary>
            Creates the brush.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.BrushData.#ctor(System.Drawing.Color)">
            <summary>
            Creates a brush with a single color.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.BrushData.#ctor(System.Drawing.Color,System.Drawing.Color,System.Decimal)">
            <summary>
            Creates a brush with a two color gradient.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.BrushData.#ctor(System.Byte[],System.Decimal,CodeForDotNet.Drawing.BrushFillWrapMode,System.Single)">
            <summary>
            Creates a brush with a texture.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.BrushData.Angle">
            <summary>
            Angle, when relevant for the type.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.BrushData.AngleSpecified">
            <summary>
            Omits the <see cref="P:CodeForDotNet.Drawing.BrushData.Angle"/> property from XML serialization when empty.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.BrushData.BrushType">
            <summary>
            TypeId of brush.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.BrushData.EndColor">
            <summary>
            End color, when relevant for the type.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.BrushData.EndColorSpecified">
            <summary>
            Omits the <see cref="P:CodeForDotNet.Drawing.BrushData.EndColor"/> property from XML serialization when empty.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.BrushData.Scale">
            <summary>
            Scaling factor, when relevant for the type.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.BrushData.ScaleSpecified">
            <summary>
            Omits the <see cref="P:CodeForDotNet.Drawing.BrushData.Scale"/> property from XML serialization when empty.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.BrushData.StartColor">
            <summary>
            Start color, when relevant for the type.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.BrushData.StartColorSpecified">
            <summary>
            Omits the <see cref="P:CodeForDotNet.Drawing.BrushData.StartColor"/> property from XML serialization when empty.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.BrushData.Texture">
            <summary>
            Texture, when relevant for the type.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.BrushData.TextureId">
            <summary>
            Texture ID, used to correlate with media libraries, enabling re-use of images for performance and to reduce disk space when saved.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.BrushData.TextureSpecified">
            <summary>
            Omits the <see cref="P:CodeForDotNet.Drawing.BrushData.Texture"/> property from XML serialization when empty.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.BrushData.WrapMode">
            <summary>
            Wrap mode, when relevant for the type, i.e. texture.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.BrushData.WrapModeSpecified">
            <summary>
            Omits the <see cref="P:CodeForDotNet.Drawing.BrushData.WrapMode"/> property from XML serialization when empty.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.BrushData.op_Inequality(CodeForDotNet.Drawing.BrushData,CodeForDotNet.Drawing.BrushData)">
            <summary>
            Overrides the inequality operator to compare by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.BrushData.op_Equality(CodeForDotNet.Drawing.BrushData,CodeForDotNet.Drawing.BrushData)">
            <summary>
            Overrides the equality operator to compare by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.BrushData.Parse(System.String)">
            <summary>
            Creates an instance from a string.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.BrushData.Clone">
            <summary>
            Creates a copy of this object.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.BrushData.Copy">
            <summary>
            Copies this brush.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.BrushData.Equals(System.Object)">
            <summary>
            Overrides the Equals method to compare by value,
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.BrushData.GetHashCode">
            <summary>
            Gets a hash-code for this object based on current values.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.BrushData.ToString">
            <summary>
            Converts the brush to an XML string.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Drawing.BrushExtensions">
            <summary>
            Extensions for work with <see cref="T:System.Drawing.Brush"/> types.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.BrushExtensions.MakeBrush(CodeForDotNet.Drawing.BrushData,System.Drawing.Rectangle)">
            <summary>
            Creates a .NET brush based on the current brush specification.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.BrushExtensions.MakeBrush(CodeForDotNet.Drawing.BrushData,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Creates a .NET brush based on the current brush specification, optionally flipping the start and end colors.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Drawing.BrushFillType">
            <summary>
            Brush type.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.BrushFillType.SingleColor">
            <summary>
            A simple, single color brush.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.BrushFillType.TwoColorGradient">
            <summary>
            A two color brush with a gradient between the start and end color.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.BrushFillType.Texture">
            <summary>
            A texture brush.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Drawing.BrushFillWrapMode">
            <summary>
            Defines a texture or gradient wrapping mode agnostic to any API for future-proof data serialization and cross-platform.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.BrushFillWrapMode.Clamp">
            <summary>
            The texture or gradient is not tiled.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.BrushFillWrapMode.Tile">
            <summary>
            Tiles the gradient or texture.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.BrushFillWrapMode.TileFlipX">
            <summary>
            Reverses the texture or gradient horizontally and then tiles the texture or gradient.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.BrushFillWrapMode.TileFlipXY">
            <summary>
            Reverses the texture or gradient horizontally and vertically and then tiles the texture or gradient.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.BrushFillWrapMode.TileFlipY">
            <summary>
            Reverses the texture or gradient vertically and then tiles the texture or gradient.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Drawing.ColorCollection">
            <summary>
            Collection of <see cref="T:System.Drawing.Color"/> entries
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.ColorCollection.#ctor">
            <summary>
            Creates an empty instance.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.ColorCollection.#ctor(System.Collections.Generic.IList{System.Drawing.Color})">
            <summary>
            Creates an instance based on an existing list.
            </summary>
            <param name="list"></param>
        </member>
        <member name="T:CodeForDotNet.Drawing.ColorExtensions">
            <summary>
            Extensions for working with the <see cref="T:System.Drawing.Color"/> class.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.ColorExtensions.ToArgbString(System.Drawing.Color)">
            <summary>
            Converts the color to a hexadecimal ARGB string, e.g. #AARRGGBB.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.ColorExtensions.ToRgbString(System.Drawing.Color)">
            <summary>
            Converts the color to a hexadecimal RGB string, e.g. #RRGGBB.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Drawing.FontData">
            <summary>
            Font data, disconnected from any API dependencies, useful for future proof serialization and cross-platform.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.FontData.#ctor">
            <summary>
            Creates an empty instance.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.FontData.#ctor(System.String,System.Single,CodeForDotNet.Drawing.FontStyle)">
            <summary>
            Creates an instance with the specified properties.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.FontData.Family">
            <summary>
            Font family.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.FontData.Size">
            <summary>
            Font size in "em" points.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.FontData.Style">
            <summary>
            Font style.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.FontData.op_Inequality(CodeForDotNet.Drawing.FontData,CodeForDotNet.Drawing.FontData)">
            <summary>
            Overrides the inequality operator to compare by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.FontData.op_Equality(CodeForDotNet.Drawing.FontData,CodeForDotNet.Drawing.FontData)">
            <summary>
            Overrides the equality operator to compare by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.FontData.Parse(System.String)">
            <summary>
            Creates an instance from a string.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.FontData.Clone">
            <summary>
            Creates a copy of this object.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.FontData.Copy">
            <summary>
            Creates a copy of this object.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.FontData.Equals(System.Object)">
            <summary>
            Overrides the Equals method to compare by value,
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeForDotNet.Drawing.FontData.GetHashCode">
            <summary>
            Gets a hash-code for this object based on current values.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.FontData.ToString">
            <summary>
            Converts the brush to an XML string.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Drawing.FontExtensions">
            <summary>
            Extensions for work with <see cref="T:System.Drawing.Font"/> types.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.FontExtensions.ToData(System.Drawing.Font)">
            <summary>
            Creates a <see cref="T:CodeForDotNet.Drawing.FontData"/> based on the parameters of an existing <see cref="T:System.Drawing.Font"/>.
            </summary>
            <remarks>The font is not touched by this instance other than to read it's properties and must be disposed as usual by the caller or other owner.</remarks>
        </member>
        <member name="M:CodeForDotNet.Drawing.FontExtensions.ToFont(CodeForDotNet.Drawing.FontData)">
            <summary>
            Creates a <see cref="T:System.Drawing.Font"/> with the current properties.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Drawing.FontStyle">
            <summary>
            Font style, defined separately from any API so it can be used in future proof data serialization and cross-platform applications.
            </summary>
            <remarks>Member names and values map directly to the Universal Windows contract.</remarks>
        </member>
        <member name="F:CodeForDotNet.Drawing.FontStyle.Normal">
            <summary>
            Normal.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.FontStyle.Oblique">
            <summary>
            Oblique style.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.FontStyle.Italic">
            <summary>
            Italic.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Drawing.ImageExtensions">
            <summary>
            Extensions for working with image classes.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.ImageExtensions.BmpContentType">
            <summary>
            BMP file content type.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.ImageExtensions.EmfContentType">
            <summary>
            EMF file content type.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.ImageExtensions.GifContentType">
            <summary>
            GIF file content type.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.ImageExtensions.IcoContentType">
            <summary>
            ICO file content type.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.ImageExtensions.JpgContentType">
            <summary>
            JPG file content type.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.ImageExtensions.PngContentType">
            <summary>
            PNG file content type.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.ImageExtensions.TifContentType">
            <summary>
            TIF file content type.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.ImageExtensions.WmfContentType">
            <summary>
            WMF file content type.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.ImageExtensions.GetContentType(System.Drawing.Imaging.ImageFormat)">
            <summary>
            Gets the MIME content type of an <see cref="T:System.Drawing.Imaging.ImageFormat"/>.
            </summary>
            <param name="format">Image format.</param>
            <returns>Content type or null when not supported.</returns>
        </member>
        <member name="M:CodeForDotNet.Drawing.ImageExtensions.GetContentType(System.Guid)">
            <summary>
            Gets the MIME content type of an <see cref="P:System.Drawing.Imaging.ImageFormat.Guid"/>.
            </summary>
            <param name="formatId">Image format Id.</param>
            <returns>Content type or null when not supported.</returns>
        </member>
        <member name="M:CodeForDotNet.Drawing.ImageExtensions.GetFormat(System.String)">
            <summary>
            Gets the <see cref="T:System.Drawing.Imaging.ImageFormat"/> for a MIME content type.
            </summary>
            <param name="contentType">MIME content type.</param>
            <returns>Image format or null when unsupported.</returns>
        </member>
        <member name="T:CodeForDotNet.Drawing.PointExtensions">
            <summary>
            Provides useful extension methods to the <see cref="T:System.Drawing.Point"/> class.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.PointExtensions.Add(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Adds two <see cref="T:System.Drawing.Point"/> s together.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.PointExtensions.Add(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Adds a <see cref="T:System.Drawing.PointF"/> to a PointF.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.PointExtensions.Subtract(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Subtracts one <see cref="T:System.Drawing.Point"/> from another.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.PointExtensions.Subtract(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Subtracts a <see cref="T:System.Drawing.PointF"/> from a <see cref="T:System.Drawing.PointF"/>.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Drawing.Printing.MarginsExtensions">
            <summary>
            Extensions for work with <see cref="T:System.Drawing.Printing.Margins"/> types.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.Printing.MarginsExtensions.ToData(System.Drawing.Printing.Margins)">
            <summary>
            Creates a <see cref="T:CodeForDotNet.Drawing.PageMarginsData"/> based on the parameters of an existing <see cref="T:System.Drawing.Printing.Margins"/>.
            </summary>
            <remarks>The font is not touched by this instance other than to read it's properties and must be disposed as usual by the caller or other owner.</remarks>
        </member>
        <member name="M:CodeForDotNet.Drawing.Printing.MarginsExtensions.ToMargins(CodeForDotNet.Drawing.PageMarginsData)">
            <summary>
            Creates a <see cref="T:System.Drawing.Printing.Margins"/> with the current properties.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Drawing.Printing.PageSettingsData">
            <summary>
            Printer page settings.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.Printing.PageSettingsData.#ctor">
            <summary>
            Initializes an empty instance.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.Printing.PageSettingsData.Color">
            <summary>
            Page color, defaults to true.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.Printing.PageSettingsData.Landscape">
            <summary>
            Landscape mode, otherwise portrait, defaults false.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.Printing.PageSettingsData.Margins">
            <summary>
            Margins.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.Printing.PageSettingsData.PaperHeight">
            <summary>
            Paper height.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.Printing.PageSettingsData.PaperName">
            <summary>
            Paper name.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.Printing.PageSettingsData.PaperSizeKind">
            <summary>
            Paper size name.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.Printing.PageSettingsData.PaperWidth">
            <summary>
            Paper width.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.Printing.PageSettingsData.PrinterName">
            <summary>
            Printer name.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Drawing.Printing.PrinterSettingsData">
            <summary>
            Printer settings data.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.Printing.PrinterSettingsData.Default">
            <summary>
            Default printer settings.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.Printing.PrinterSettingsData.Collate">
            <summary>
            Collate option.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.Printing.PrinterSettingsData.Copies">
            <summary>
            Number of copies.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.Printing.PrinterSettingsData.DuplexOutput">
            <summary>
            Duplex option.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.Printing.PrinterSettingsData.PrinterName">
            <summary>
            Printer name.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Drawing.Printing.PrinterSettingsDuplex">
            <summary>
            Defines a printer duplex setting which is not bound to any API, so it can be used for future proof data serialization and cross-platform.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.Printing.PrinterSettingsDuplex.Default">
            <summary>
            The printer's default duplex setting.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.Printing.PrinterSettingsDuplex.Horizontal">
            <summary>
            Double-sided, horizontal printing.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.Printing.PrinterSettingsDuplex.Simplex">
            <summary>
            Single-sided printing.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.Printing.PrinterSettingsDuplex.Vertical">
            <summary>
            Double-sided, vertical printing.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Drawing.Printing.PrintingExtensions">
            <summary>
            Extensions for work with types in the <see cref="N:System.Drawing.Printing"/> namespace.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.Printing.PrintingExtensions.ToData(System.Drawing.Printing.PrinterSettings)">
            <summary>
            Converts a .NET PrinterSettings class to a data structure of this type.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.Printing.PrintingExtensions.ToData(System.Drawing.Printing.PageSettings)">
            <summary>
            Creates a data structure of this type from .NET PageSettings.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.Printing.PrintingExtensions.ToPageSettings(CodeForDotNet.Drawing.Printing.PageSettingsData)">
            <summary>
            Converts this data to a .NET PageSettings class.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.Printing.PrintingExtensions.ToPrinterSettings(CodeForDotNet.Drawing.Printing.PrinterSettingsData)">
            <summary>
            Converts this data to a .NET PrinterSettings class.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Drawing.PageMarginsData">
            <summary>
            Margins data.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.PageMarginsData.#ctor">
            <summary>
            Creates the margins.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.PageMarginsData.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates the margins from specified values.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.PageMarginsData.Bottom">
            <summary>
            Gets or sets the bottom margin, in hundredths of an inch.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.PageMarginsData.Left">
            <summary>
            Gets or sets the left margin width, in hundredths of an inch.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.PageMarginsData.Right">
            <summary>
            Gets or sets the right margin width, in hundredths of an inch.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Drawing.PageMarginsData.Top">
            <summary>
            Gets or sets the top margin width, in hundredths of an inch.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.PageMarginsData.op_Inequality(CodeForDotNet.Drawing.PageMarginsData,CodeForDotNet.Drawing.PageMarginsData)">
            <summary>
            Overrides the inequality operator to compare by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.PageMarginsData.op_Equality(CodeForDotNet.Drawing.PageMarginsData,CodeForDotNet.Drawing.PageMarginsData)">
            <summary>
            Overrides the equality operator to compare by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.PageMarginsData.Parse(System.String)">
            <summary>
            Creates an instance from a string.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.PageMarginsData.Clone">
            <summary>
            Creates a copy of this object.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.PageMarginsData.Copy">
            <summary>
            Copies this margins.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.PageMarginsData.Equals(System.Object)">
            <summary>
            Overrides the Equals method to compare by value,
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.PageMarginsData.GetHashCode">
            <summary>
            Gets a hash-code for this object based on current values.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Drawing.PageMarginsData.ToString">
            <summary>
            Converts the margins to an XML string.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Drawing.StringHorizontalAlignment">
            <summary>
            String alignment disconnected from any API dependencies, useful for future proof serialization and cross-platform.
            </summary>
            <remarks>Explicitly cast to "System.Drawing.StringAlignment" via integer.</remarks>
        </member>
        <member name="F:CodeForDotNet.Drawing.StringHorizontalAlignment.Near">
            <summary>
            Near to the start of the line (according to writing direction).
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.StringHorizontalAlignment.Center">
            <summary>
            Centered.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Drawing.StringHorizontalAlignment.Far">
            <summary>
            Far from the start of the line (according to writing direction).
            </summary>
        </member>
        <member name="T:CodeForDotNet.ExceptionExtensions">
            <summary>
            Contains extensions for working with Exceptions.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ExceptionExtensions.GetFullMessage(System.Exception)">
            <summary>
            Gets the whole message (including inner exceptions) from an <see cref="T:System.Exception"/>.
            </summary>
            <param name="exception">Exception on which this extension method applies.</param>
        </member>
        <member name="M:CodeForDotNet.ExceptionExtensions.GetFullMessage(System.Exception,System.Boolean)">
            <summary>
            Gets the whole message (including inner exceptions) from an <see cref="T:System.Exception"/> and optional debug information (stack trace).
            </summary>
            <param name="exception">Exception on which this extension method applies.</param>
            <param name="debug">Set true to include debug information (Exception.ToString() which includes stack.trace).</param>
        </member>
        <member name="T:CodeForDotNet.GuidExtensions">
            <summary>
            Contains extensions for the <see cref="T:System.Guid"/> type.
            </summary>
        </member>
        <member name="F:CodeForDotNet.GuidExtensions.GuidBFormat">
            <summary>
            Regular expression which matches a valid <see cref="T:System.Guid"/> in "B" format.
            </summary>
        </member>
        <member name="F:CodeForDotNet.GuidExtensions.GuidDFormat">
            <summary>
            Regular expression which matches a valid <see cref="T:System.Guid"/> in "D" format.
            </summary>
        </member>
        <member name="F:CodeForDotNet.GuidExtensions.GuidNFormat">
            <summary>
            Regular expression which matches a valid <see cref="T:System.Guid"/> in "N" format.
            </summary>
        </member>
        <member name="F:CodeForDotNet.GuidExtensions.GuidPFormat">
            <summary>
            Regular expression which matches a valid <see cref="T:System.Guid"/> in "P" format.
            </summary>
        </member>
        <member name="M:CodeForDotNet.GuidExtensions.TryParse(System.String,System.Guid@)">
            <summary>
            Parses a GUID string to a nullable value.
            </summary>
        </member>
        <member name="T:CodeForDotNet.IDisposableObject">
            <summary>
            Provides greater control over object lifetime and memory management.
            </summary>
        </member>
        <member name="E:CodeForDotNet.IDisposableObject.Disposed">
            <summary>
            Fired when the object has finished disposing.
            </summary>
        </member>
        <member name="E:CodeForDotNet.IDisposableObject.Disposing">
            <summary>
            Fired when the object starts to dispose.
            </summary>
        </member>
        <member name="P:CodeForDotNet.IDisposableObject.IsDisposed">
            <summary>
            Indicates if the object has finished disposing.
            </summary>
        </member>
        <member name="P:CodeForDotNet.IDisposableObject.IsDisposing">
            <summary>
            Indicates if the object is in the process of or has already disposed.
            </summary>
        </member>
        <member name="T:CodeForDotNet.IO.FileSystemExtensions">
            <summary>
            Provides helper functions for working with files and directories.
            </summary>
        </member>
        <member name="F:CodeForDotNet.IO.FileSystemExtensions.FileTimeMinValue">
            <summary>
            Minimum <see cref="T:System.DateTime"/> reported by the file system.
            </summary>
        </member>
        <member name="M:CodeForDotNet.IO.FileSystemExtensions.CopyDirectory(System.String,System.String,System.EventHandler{CodeForDotNet.IO.FileSystemExtensionsProgressEventArgs})">
            <summary>
            Copies all the files and subdirectories from one path to another. Creates the target path and overwrites any existing files as necessary. Provides
            progress feedback for each directory copied.
            </summary>
            <param name="sourcePath">Source directory.</param>
            <param name="targetPath">Target directory.</param>
            <param name="progressHandler">Optional progress delegate.</param>
        </member>
        <member name="M:CodeForDotNet.IO.FileSystemExtensions.CountFiles(System.String)">
            <summary>
            Recursively counts files in a directory.
            </summary>
        </member>
        <member name="M:CodeForDotNet.IO.FileSystemExtensions.DeleteDirectoryForce(System.String)">
            <summary>
            Forcibly deletes a directory; removing any attributes (i.e. read-only) from files within.
            </summary>
        </member>
        <member name="M:CodeForDotNet.IO.FileSystemExtensions.DeleteFileForce(System.String)">
            <summary>
            Forcibly deletes a file; removing any attributes (i.e. read-only) which may prevent deletion.
            </summary>
        </member>
        <member name="M:CodeForDotNet.IO.FileSystemExtensions.GetDirectorySize(System.String,System.String[])">
            <summary>
            Counts the size of all files in all subdirectories of the specified path.
            </summary>
            <param name="sourcePath">Directory to scan.</param>
            <param name="excludeFiles">List of filenames to exclude.</param>
            <returns>Total size in bytes.</returns>
        </member>
        <member name="M:CodeForDotNet.IO.FileSystemExtensions.CopyDirectoryRecurse(System.String,System.String,System.EventHandler{CodeForDotNet.IO.FileSystemExtensionsProgressEventArgs},System.Int32@,System.Int32@)">
            <summary>
            Recursion method for <see cref="M:CodeForDotNet.IO.FileSystemExtensions.CopyDirectory(System.String,System.String,System.EventHandler{CodeForDotNet.IO.FileSystemExtensionsProgressEventArgs})"/>.
            </summary>
            <param name="sourcePath">Source directory.</param>
            <param name="targetPath">Target directory.</param>
            <param name="progressHandler">Optional progress delegate.</param>
            <param name="current">Current file count, used for progress feedback. Set to 0 at start.</param>
            <param name="total">Total file count, used for progress feedback. Set to 1 at start.</param>
        </member>
        <member name="T:CodeForDotNet.IO.FileSystemExtensionsProgressEventArgs">
            <summary>
            Event arguments for a progress update.
            </summary>
        </member>
        <member name="P:CodeForDotNet.IO.FileSystemExtensionsProgressEventArgs.Message">
            <summary>
            Progress message.
            </summary>
        </member>
        <member name="P:CodeForDotNet.IO.FileSystemExtensionsProgressEventArgs.Position">
            <summary>
            Current position.
            </summary>
        </member>
        <member name="P:CodeForDotNet.IO.FileSystemExtensionsProgressEventArgs.Range">
            <summary>
            Range/maximum/end position.
            </summary>
        </member>
        <member name="T:CodeForDotNet.MonthOfYear">
            <summary>
            Month numbers, with January as 1 though to December as 12.
            </summary>
        </member>
        <member name="F:CodeForDotNet.MonthOfYear.None">
            <summary>
            Not specified.
            </summary>
        </member>
        <member name="F:CodeForDotNet.MonthOfYear.January">
            <summary>
            January.
            </summary>
        </member>
        <member name="F:CodeForDotNet.MonthOfYear.February">
            <summary>
            February.
            </summary>
        </member>
        <member name="F:CodeForDotNet.MonthOfYear.March">
            <summary>
            March.
            </summary>
        </member>
        <member name="F:CodeForDotNet.MonthOfYear.April">
            <summary>
            April.
            </summary>
        </member>
        <member name="F:CodeForDotNet.MonthOfYear.May">
            <summary>
            May.
            </summary>
        </member>
        <member name="F:CodeForDotNet.MonthOfYear.June">
            <summary>
            June.
            </summary>
        </member>
        <member name="F:CodeForDotNet.MonthOfYear.July">
            <summary>
            July.
            </summary>
        </member>
        <member name="F:CodeForDotNet.MonthOfYear.August">
            <summary>
            August.
            </summary>
        </member>
        <member name="F:CodeForDotNet.MonthOfYear.September">
            <summary>
            September.
            </summary>
        </member>
        <member name="F:CodeForDotNet.MonthOfYear.October">
            <summary>
            October,
            </summary>
        </member>
        <member name="F:CodeForDotNet.MonthOfYear.November">
            <summary>
            November.
            </summary>
        </member>
        <member name="F:CodeForDotNet.MonthOfYear.December">
            <summary>
            December.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Net.MimeExtensions">
            <summary>
            Provides helper methods and constants useful for processing MIME data types and streams.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Net.MimeExtensions.FileUploadHttpMethod">
            <summary>
            HTTP Method used for file upload post-backs.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Net.MimeExtensions.FileUploadMimeType">
            <summary>
            Root MIME type for file uploads.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Net.MimeExtensions.HeaderContentDisposition">
            <summary>
            Content Disposition header name.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Net.MimeExtensions.HeaderContentDispositionAttachmentValueFormat">
            <summary>
            Content Disposition header value for an attached file (opened in a new browser window, prompts the user to open/save normally). Formatted string,
            only parameter is the filename without path.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Net.MimeExtensions.HeaderContentDispositionInlineValueFormat">
            <summary>
            Content Disposition header value for an in-line file (open within browser if supported, e.g. Adobe PDF viewed in browser via ActiveX). Formatted
            string, only parameter is the filename without path.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Net.MimeExtensions.HeaderContentLength">
            <summary>
            Content Length header name.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Net.MimeExtensions.HeaderContentType">
            <summary>
            Content Type header name.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Net.MimeExtensions.MimeBoundaryPrefix">
            <summary>
            MIME boundary prefix characters, also used to end the entire MIME request.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Net.MimeExtensions.FindBoundary(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Finds a MIME boundary.
            </summary>
            <param name="buffer">Buffer to search.</param>
            <param name="offset">Offset to start searching the buffer.</param>
            <param name="length">Maximum length to search in the buffer from the offset.</param>
            <param name="boundary">Boundary to search for within the buffer.</param>
            <param name="contentEnd">Returns the index of the new line at the end of the content, before the boundary. Set to -1 when no boundary was found.</param>
            <param name="boundaryEnd">
            Returns the index of the position after the boundary end and any CR and the LF. At the end of a MIME post the "--" MIME terminator will follow the
            boundary without any CR and the LF, in which case the position is set to the first character of the terminator (first character after the boundary).
            When no boundary was found this is set to -1 when no boundary was found.
            </param>
            <returns>True if the boundary was found, otherwise false.</returns>
        </member>
        <member name="M:CodeForDotNet.Net.MimeExtensions.FindLine(System.Byte[],System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Tests a MIME data buffer for a complete ASCII line. Returns the length of the current line without any CR and the LF, and the offset to the next line
            including any CR and the LF.
            </summary>
            <param name="buffer">Buffer to search.</param>
            <param name="offset">Offset to start searching the buffer.</param>
            <param name="length">Maximum length to search in the buffer from the offset.</param>
            <param name="lineSize">Returns the length of the current line without any CR and the LF, when found, else 0.</param>
            <param name="nextLine">Returns the index of the next line including any CR and the LF, when found, else -1.</param>
            <returns>True when a complete line was found, otherwise false. Blank lines are also true but have a lineSize of 0.</returns>
        </member>
        <member name="M:CodeForDotNet.Net.MimeExtensions.GetHeaderAttribute(System.String,System.String)">
            <summary>
            Gets an attribute value from a header string. Attributes are appended after a semicolon at the end of header values. e.g. Content-type:
            multipart/mixed; boundary="BoundaryText"
            </summary>
        </member>
        <member name="M:CodeForDotNet.Net.MimeExtensions.GetHeaderValue(System.String)">
            <summary>
            Gets the header value alone, without any attachments or white space.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Net.NetworkExtensions">
            <summary>
            Networking extensions.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Net.NetworkExtensions.GetFullHostName">
            <summary>
            Gets the host name and any domain (the FQDN) of the local computer.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Numerics.AngleVector2">
            <summary>
            A two-dimentional vector represented by angle and length.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.AngleVector2.#ctor(System.Single,System.Single)">
            <summary>
            Creates an instance with the specified values.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.AngleVector2.#ctor(System.Drawing.PointF)">
            <summary>
            Creates a structure by converting from a <see cref="T:System.Drawing.PointF"/>.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Numerics.AngleVector2.Angle">
            <summary>
            Angle.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Numerics.AngleVector2.Length">
            <summary>
            Length.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.AngleVector2.From(System.Drawing.PointF)">
            <summary>
            Creates an angle based vector from a point based vector..
            </summary>					  
        </member>
        <member name="M:CodeForDotNet.Numerics.AngleVector2.From(System.Single,System.Single)">
            <summary>
            Creates an angle based vector from a point based vector..
            </summary>					  
        </member>
        <member name="M:CodeForDotNet.Numerics.AngleVector2.op_Subtraction(CodeForDotNet.Numerics.AngleVector2,CodeForDotNet.Numerics.AngleVector2)">
            <summary>
            Overrides the subtraction operator, subtracting both angle and distance values.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.AngleVector2.op_Inequality(CodeForDotNet.Numerics.AngleVector2,CodeForDotNet.Numerics.AngleVector2)">
            <summary>
            Compares two objects of this type for inequality.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.AngleVector2.op_Addition(CodeForDotNet.Numerics.AngleVector2,CodeForDotNet.Numerics.AngleVector2)">
            <summary>
            Overrides the addition operator, adding both angle and distance values.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.AngleVector2.op_Equality(CodeForDotNet.Numerics.AngleVector2,CodeForDotNet.Numerics.AngleVector2)">
            <summary>
            Compares two objects of this type for equality.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.AngleVector2.Add(CodeForDotNet.Numerics.AngleVector2)">
            <summary>
            Adds the value to this instance.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.AngleVector2.Equals(System.Object)">
            <summary>
            Compares this object with another.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.AngleVector2.Equals(CodeForDotNet.Numerics.AngleVector2)">
            <summary>
            Compares this object with another of the same type.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.AngleVector2.GetHashCode">
            <summary>
            Gets a hash-code based on the current values.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.AngleVector2.Subtract(CodeForDotNet.Numerics.AngleVector2)">
            <summary>
            Subtracts the value from this instance.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.AngleVector2.ToPointF">
            <summary>
            Converts this angle based vector to a point based vector.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Numerics.BigIntegerExtensions">
            <summary>
            <see cref="T:System.Numerics.BigInteger"/> extensions.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Numerics.BigIntegerExtensions.NumberDigits">
            <summary>
            Valid number digits in order of value starting at zero.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.BigIntegerExtensions.ToString(System.Numerics.BigInteger,System.Int32)">
            <summary>
            Converts the number to a string of the specified base.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.BigIntegerExtensions.ToString(System.Numerics.BigInteger,System.Int32,System.Boolean)">
            <summary>
            Converts the number to a string of the specified base.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.BigIntegerExtensions.ToString(System.Numerics.BigInteger,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Converts the number to a string of the specified base.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.BigIntegerExtensions.TryParse(System.String,System.Int32,System.Numerics.BigInteger@)">
            <summary>
            Converts a string to a number of the specified base.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.BigIntegerExtensions.TryParse(System.String,System.Int32,System.Numerics.BigInteger@,System.Boolean)">
            <summary>
            Converts a string to a number of the specified base.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Numerics.Number">
            <summary>
            Number of unlimited size, based on a variable length byte array, signed or unsigned.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Numerics.Number.NumberDigits">
            <summary>
            Valid number digits in order of value starting at zero.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Numerics.Number._bytes">
            <summary>
            The internal numeric value, stored as a byte array ordered from least significant (LSB) to most significant (MSB), i.e. the LSB is at index 0.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Creates a value based on an existing array of bytes (not copied).
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.#ctor(System.Byte)">
            <summary>
            Creates a value based on an existing <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.#ctor(System.SByte)">
            <summary>
            Creates a value based on an existing <see cref="T:System.SByte"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.#ctor(System.Int16)">
            <summary>
            Creates a value based on an existing <see cref="T:System.Int16"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.#ctor(System.UInt16)">
            <summary>
            Creates a value based on an existing <see cref="T:System.UInt16"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.#ctor(System.Int32)">
            <summary>
            Creates a value based on an existing <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.#ctor(System.UInt32)">
            <summary>
            Creates a value based on an existing <see cref="T:System.UInt32"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.#ctor(System.Int64)">
            <summary>
            Creates a value based on an existing <see cref="T:System.Int64"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.#ctor(System.UInt64)">
            <summary>
            Creates a value based on an existing <see cref="T:System.UInt64"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.#ctor(System.Single)">
            <summary>
            Creates a value based on an existing <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.#ctor(System.Double)">
            <summary>
            Creates a value based on an existing <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.#ctor(System.Decimal)">
            <summary>
            Creates a value based on an existing <see cref="T:System.Decimal"/>.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Numerics.Number.MinusOne">
            <summary>
            Minus-one signed value.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Numerics.Number.One">
            <summary>
            One signed value.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Numerics.Number.Zero">
            <summary>
            Zero signed value.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Numerics.Number.ByteSize">
            <summary>
            Size in bytes.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Numerics.Number.IsZero">
            <summary>
            Indicates the current value is zero.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Numerics.Number.Sign">
            <summary>
            Indicates the sign, true for positive, false for negative. Always true when unsigned.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Numerics.Number.Signed">
            <summary>
            Enables or disables signed number processing.
            </summary>
            <remarks>The internal value is not changed, only its interpretation.</remarks>
        </member>
        <member name="P:CodeForDotNet.Numerics.Number.Item(System.Int32)">
            <summary>
            Gets the byte at the specified index.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.Absolute(CodeForDotNet.Numerics.Number)">
            <summary>
            Gets the absolute value of the number, basically converting negative to positive when necessary.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.Add(CodeForDotNet.Numerics.Number,CodeForDotNet.Numerics.Number)">
            <summary>
            Adds two numbers together.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.BitwiseAnd(CodeForDotNet.Numerics.Number,CodeForDotNet.Numerics.Number)">
            <summary>
            Performs a bitwise AND on two <see cref="T:CodeForDotNet.Numerics.Number"/> values.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.BitwiseOr(CodeForDotNet.Numerics.Number,CodeForDotNet.Numerics.Number)">
            <summary>
            Performs a bitwise OR on two <see cref="T:CodeForDotNet.Numerics.Number"/> values.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.Decrement(CodeForDotNet.Numerics.Number)">
            <summary>
            Decrements a <see cref="T:CodeForDotNet.Numerics.Number"/> by one.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.Divide(CodeForDotNet.Numerics.Number,CodeForDotNet.Numerics.Number)">
            <summary>
            Divides one <see cref="T:CodeForDotNet.Numerics.Number"/> by another.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.Divide(CodeForDotNet.Numerics.Number,CodeForDotNet.Numerics.Number,CodeForDotNet.Numerics.Number@)">
            <summary>
            Divides one <see cref="T:CodeForDotNet.Numerics.Number"/> by another, including remainder.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_Explicit(CodeForDotNet.Numerics.Number)~System.Byte">
            <summary>
            Explicitly converts a <see cref="T:CodeForDotNet.Numerics.Number"/> to a <see cref="T:System.Byte"/> (unsigned).
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_Explicit(CodeForDotNet.Numerics.Number)~System.Decimal">
            <summary>
            Explicitly converts a <see cref="T:CodeForDotNet.Numerics.Number"/> to a <see cref="T:System.Decimal"/> (signed).
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_Explicit(CodeForDotNet.Numerics.Number)~System.Int32">
            <summary>
            Explicitly converts a <see cref="T:CodeForDotNet.Numerics.Number"/> to a <see cref="T:System.Int32"/> (signed).
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_Explicit(CodeForDotNet.Numerics.Number)~System.Int64">
            <summary>
            Explicitly converts a <see cref="T:CodeForDotNet.Numerics.Number"/> to a <see cref="T:System.Int64"/> (signed).
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_Explicit(CodeForDotNet.Numerics.Number)~System.SByte">
            <summary>
            Explicitly converts a <see cref="T:CodeForDotNet.Numerics.Number"/> to a <see cref="T:System.SByte"/> (signed).
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_Explicit(CodeForDotNet.Numerics.Number)~System.Int16">
            <summary>
            Explicitly converts a <see cref="T:CodeForDotNet.Numerics.Number"/> to a <see cref="T:System.Int16"/> (signed).
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_Explicit(CodeForDotNet.Numerics.Number)~System.UInt32">
            <summary>
            Explicitly converts a <see cref="T:CodeForDotNet.Numerics.Number"/> to a <see cref="T:System.UInt32"/> (unsigned).
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_Explicit(CodeForDotNet.Numerics.Number)~System.UInt64">
            <summary>
            Explicitly converts a <see cref="T:CodeForDotNet.Numerics.Number"/> to a <see cref="T:System.UInt64"/> (unsigned).
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_Explicit(CodeForDotNet.Numerics.Number)~System.UInt16">
            <summary>
            Explicitly converts a <see cref="T:CodeForDotNet.Numerics.Number"/> to a <see cref="T:System.UInt16"/> (unsigned).
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.FromByte(System.Byte)">
            <summary>
            Converts an (unsigned) <see cref="T:System.Byte"/> to a <see cref="T:CodeForDotNet.Numerics.Number"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.FromDecimal(System.Decimal)">
            <summary>
            Converts an (signed) <see cref="T:System.Decimal"/> to a <see cref="T:CodeForDotNet.Numerics.Number"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.FromDouble(System.Double)">
            <summary>
            Converts an (signed) <see cref="T:System.Double"/> to a <see cref="T:CodeForDotNet.Numerics.Number"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.FromInt16(System.Int16)">
            <summary>
            Converts an (signed) <see cref="T:System.Int16"/> to a <see cref="T:CodeForDotNet.Numerics.Number"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.FromInt32(System.Int32)">
            <summary>
            Converts an (signed) <see cref="T:System.Int32"/> to a <see cref="T:CodeForDotNet.Numerics.Number"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.FromInt64(System.Int64)">
            <summary>
            Converts an (signed) <see cref="T:System.Int64"/> to a <see cref="T:CodeForDotNet.Numerics.Number"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.FromSByte(System.SByte)">
            <summary>
            Converts an (signed) <see cref="T:System.SByte"/> to a <see cref="T:CodeForDotNet.Numerics.Number"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.FromSingle(System.Single)">
            <summary>
            Converts an (signed) <see cref="T:System.Single"/> to a <see cref="T:CodeForDotNet.Numerics.Number"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.FromUInt16(System.UInt16)">
            <summary>
            Converts an (unsigned) <see cref="T:System.UInt16"/> to a <see cref="T:CodeForDotNet.Numerics.Number"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.FromUInt32(System.UInt32)">
            <summary>
            Converts an (unsigned) <see cref="T:System.UInt32"/> to a <see cref="T:CodeForDotNet.Numerics.Number"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.FromUInt64(System.UInt64)">
            <summary>
            Converts an (unsigned) <see cref="T:System.UInt64"/> to a <see cref="T:CodeForDotNet.Numerics.Number"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_Implicit(System.Byte)~CodeForDotNet.Numerics.Number">
            <summary>
            Implicitly converts an (unsigned) <see cref="T:System.Byte"/> to a <see cref="T:CodeForDotNet.Numerics.Number"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_Implicit(System.SByte)~CodeForDotNet.Numerics.Number">
            <summary>
            Implicitly converts an (signed) <see cref="T:System.SByte"/> to a <see cref="T:CodeForDotNet.Numerics.Number"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_Implicit(System.UInt16)~CodeForDotNet.Numerics.Number">
            <summary>
            Implicitly converts an (unsigned) <see cref="T:System.UInt16"/> to a <see cref="T:CodeForDotNet.Numerics.Number"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_Implicit(System.Int16)~CodeForDotNet.Numerics.Number">
            <summary>
            Implicitly converts an (signed) <see cref="T:System.Int16"/> to a <see cref="T:CodeForDotNet.Numerics.Number"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_Implicit(System.UInt32)~CodeForDotNet.Numerics.Number">
            <summary>
            Implicitly converts an (unsigned) <see cref="T:System.UInt32"/> to a <see cref="T:CodeForDotNet.Numerics.Number"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_Implicit(System.Int32)~CodeForDotNet.Numerics.Number">
            <summary>
            Implicitly converts an (signed) <see cref="T:System.Int32"/> to a <see cref="T:CodeForDotNet.Numerics.Number"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_Implicit(System.UInt64)~CodeForDotNet.Numerics.Number">
            <summary>
            Implicitly converts an (unsigned) <see cref="T:System.UInt64"/> to a <see cref="T:CodeForDotNet.Numerics.Number"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_Implicit(System.Int64)~CodeForDotNet.Numerics.Number">
            <summary>
            Implicitly converts an (signed) <see cref="T:System.Int64"/> to a <see cref="T:CodeForDotNet.Numerics.Number"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_Implicit(System.Single)~CodeForDotNet.Numerics.Number">
            <summary>
            Implicitly converts an (signed) <see cref="T:System.Single"/> to a <see cref="T:CodeForDotNet.Numerics.Number"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_Implicit(System.Double)~CodeForDotNet.Numerics.Number">
            <summary>
            Implicitly converts an (signed) <see cref="T:System.Double"/> to a <see cref="T:CodeForDotNet.Numerics.Number"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_Implicit(System.Decimal)~CodeForDotNet.Numerics.Number">
            <summary>
            Implicitly converts an (signed) <see cref="T:System.Decimal"/> to a <see cref="T:CodeForDotNet.Numerics.Number"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.Increment(CodeForDotNet.Numerics.Number)">
            <summary>
            Increments a <see cref="T:CodeForDotNet.Numerics.Number"/> by one.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.LeftShift(CodeForDotNet.Numerics.Number,System.Int32)">
            <summary>
            Performs a bitwise left shift of a <see cref="T:CodeForDotNet.Numerics.Number"/> value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.Multiply(CodeForDotNet.Numerics.Number,CodeForDotNet.Numerics.Number)">
            <summary>
            Multiplies one <see cref="T:CodeForDotNet.Numerics.Number"/> by another.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.Negate(CodeForDotNet.Numerics.Number)">
            <summary>
            Performs a negation of a <see cref="T:CodeForDotNet.Numerics.Number"/>, also known as the "two's complement".
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.OnesComplement(CodeForDotNet.Numerics.Number)">
            <summary>
            Performs a bitwise NOT on a <see cref="T:CodeForDotNet.Numerics.Number"/> value, also known as the "one's complement".
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_UnaryNegation(CodeForDotNet.Numerics.Number)">
            <summary>
            Performs a negation of a <see cref="T:CodeForDotNet.Numerics.Number"/>, also known as the "two's complement".
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_Subtraction(CodeForDotNet.Numerics.Number,CodeForDotNet.Numerics.Number)">
            <summary>
            Subtracts two numbers.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_Decrement(CodeForDotNet.Numerics.Number)">
            <summary>
            Decrements a <see cref="T:CodeForDotNet.Numerics.Number"/> by one.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_Inequality(CodeForDotNet.Numerics.Number,CodeForDotNet.Numerics.Number)">
            <summary>
            Compares two objects of this type for equality.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_BitwiseAnd(CodeForDotNet.Numerics.Number,CodeForDotNet.Numerics.Number)">
            <summary>
            Performs a bitwise AND on two <see cref="T:CodeForDotNet.Numerics.Number"/> values.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_Multiply(CodeForDotNet.Numerics.Number,CodeForDotNet.Numerics.Number)">
            <summary>
            Multiplies one <see cref="T:CodeForDotNet.Numerics.Number"/> by another.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_Division(CodeForDotNet.Numerics.Number,CodeForDotNet.Numerics.Number)">
            <summary>
            Divides one <see cref="T:CodeForDotNet.Numerics.Number"/> by another.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_ExclusiveOr(CodeForDotNet.Numerics.Number,CodeForDotNet.Numerics.Number)">
            <summary>
            Performs a bitwise XOR on two <see cref="T:CodeForDotNet.Numerics.Number"/> values.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_BitwiseOr(CodeForDotNet.Numerics.Number,CodeForDotNet.Numerics.Number)">
            <summary>
            Performs a bitwise OR on two <see cref="T:CodeForDotNet.Numerics.Number"/> values.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_OnesComplement(CodeForDotNet.Numerics.Number)">
            <summary>
            Performs a bitwise NOT on a <see cref="T:CodeForDotNet.Numerics.Number"/> value, also known as the "one's complement".
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_UnaryPlus(CodeForDotNet.Numerics.Number)">
            <summary>
            Returns the value of a <see cref="T:CodeForDotNet.Numerics.Number"/> (no change to sign).
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_Addition(CodeForDotNet.Numerics.Number,CodeForDotNet.Numerics.Number)">
            <summary>
            Adds two numbers together.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_Increment(CodeForDotNet.Numerics.Number)">
            <summary>
            Increments a <see cref="T:CodeForDotNet.Numerics.Number"/> by one.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_LessThan(CodeForDotNet.Numerics.Number,CodeForDotNet.Numerics.Number)">
            <summary>
            Tests if one <see cref="T:CodeForDotNet.Numerics.Number"/> is less than another.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_LeftShift(CodeForDotNet.Numerics.Number,System.Int32)">
            <summary>
            Performs a bitwise left shift of a <see cref="T:CodeForDotNet.Numerics.Number"/> value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_LessThanOrEqual(CodeForDotNet.Numerics.Number,CodeForDotNet.Numerics.Number)">
            <summary>
            Tests if one <see cref="T:CodeForDotNet.Numerics.Number"/> is less than or equal to another.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_Equality(CodeForDotNet.Numerics.Number,CodeForDotNet.Numerics.Number)">
            <summary>
            Compares two objects of this type for equality.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_GreaterThan(CodeForDotNet.Numerics.Number,CodeForDotNet.Numerics.Number)">
            <summary>
            Tests if one <see cref="T:CodeForDotNet.Numerics.Number"/> is greater than another.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_GreaterThanOrEqual(CodeForDotNet.Numerics.Number,CodeForDotNet.Numerics.Number)">
            <summary>
            Tests if one <see cref="T:CodeForDotNet.Numerics.Number"/> is greater than or equal to another.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.op_RightShift(CodeForDotNet.Numerics.Number,System.Int32)">
            <summary>
            Performs a bitwise right shift of a <see cref="T:CodeForDotNet.Numerics.Number"/> value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.Parse(System.String,System.Int32)">
            <summary>
            Converts a string to a signed <see cref="T:CodeForDotNet.Numerics.Number"/> of the specified base.
            </summary>
            <exception cref="T:System.FormatException">Thrown when conversion is not possible because the string value has an invalid format.</exception>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.Parse(System.String,System.Int32,System.Boolean)">
            <summary>
            Converts a string to a signed or unsigned <see cref="T:CodeForDotNet.Numerics.Number"/> of the specified base.
            </summary>
            <exception cref="T:System.FormatException">Thrown when conversion is not possible because the string value has an invalid format.</exception>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.Plus(CodeForDotNet.Numerics.Number)">
            <summary>
            Returns the value of a <see cref="T:CodeForDotNet.Numerics.Number"/> (no change to sign).
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.Power(CodeForDotNet.Numerics.Number,CodeForDotNet.Numerics.Number)">
            <summary>
            Calculates the exponent, multiplying a <see cref="T:CodeForDotNet.Numerics.Number"/> by itself a number of times.
            </summary>
            <remarks>Also known as raising the <paramref name="value"/> to the specified <paramref name="exponent"/> "power". http://en.wikipedia.org/wiki/Exponentiation_by_squaring</remarks>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.RightShift(CodeForDotNet.Numerics.Number,System.Int32)">
            <summary>
            Performs a bitwise right shift of a <see cref="T:CodeForDotNet.Numerics.Number"/> value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.Subtract(CodeForDotNet.Numerics.Number,CodeForDotNet.Numerics.Number)">
            <summary>
            Subtracts two numbers.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.TryParse(System.String,System.Int32,CodeForDotNet.Numerics.Number@)">
            <summary>
            Attempts conversion of a string to a signed <see cref="T:CodeForDotNet.Numerics.Number"/> of the specified base.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.TryParse(System.String,System.Int32,CodeForDotNet.Numerics.Number@,System.Boolean)">
            <summary>
            Attempts conversion of a string to a signed or unsigned <see cref="T:CodeForDotNet.Numerics.Number"/> of the specified base.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.Xor(CodeForDotNet.Numerics.Number,CodeForDotNet.Numerics.Number)">
            <summary>
            Performs a bitwise XOR on two <see cref="T:CodeForDotNet.Numerics.Number"/> values.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.CompareTo(CodeForDotNet.Numerics.Number)">
            <summary>
            Compares this <see cref="T:CodeForDotNet.Numerics.Number"/> with another.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.Equals(System.Object)">
            <summary>
            Compares this object with another.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.Equals(CodeForDotNet.Numerics.Number)">
            <summary>
            Compares this object with another of the same type.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.GetBytes">
            <summary>
            Gets a read-only reference to the internal bytes of this value.
            </summary>
            <remarks>
            The numeric value is stored in this byte array ordered from least significant (LSB) to most significant (MSB), i.e. the LSB is at index 0.
            </remarks>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.GetHashCode">
            <summary>
            Gets a hash based on the current value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.Resize(System.Int32)">
            <summary>
            Returns a <see cref="T:CodeForDotNet.Numerics.Number"/> which has been resized with sign extension when <see cref="P:CodeForDotNet.Numerics.Number.Signed"/>.
            </summary>
            <param name="size">New size in bytes.</param>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.Resize(System.Int32,System.Boolean)">
            <summary>
            Returns a <see cref="T:CodeForDotNet.Numerics.Number"/> which has been resized with optional sign extension.
            </summary>
            <param name="size">New size in bytes.</param>
            <param name="extendSign">When true the sign will be extended when setting to a larger value.</param>
            <returns>New value which is truncated or extended as specified. Any overflow is discarded.</returns>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.ToByte">
            <summary>
            Converts the current value to a <see cref="T:System.Byte"/> (unsigned).
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.ToDecimal">
            <summary>
            Converts the current value to a <see cref="T:System.Decimal"/> (signed).
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.ToInt16">
            <summary>
            Converts the current value to a <see cref="T:System.Int16"/> (signed).
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.ToInt32">
            <summary>
            Converts the current value to a <see cref="T:System.Int32"/> (signed).
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.ToInt64">
            <summary>
            Converts the current value to a <see cref="T:System.Int64"/> (signed).
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.ToSByte">
            <summary>
            Converts the current value to a <see cref="T:System.SByte"/> (signed).
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.ToSigned(System.Boolean)">
            <summary>
            Creates a signed copy of this value, optionally extending to preserve sign.
            </summary>
            <param name="extend">
            Set true to preserve sign by extending when converting from unsigned to signed and the most significant (sign) bit is already used by the original value.
            </param>
            <returns>New <see cref="T:CodeForDotNet.Numerics.Number"/> which is signed and has the same value.</returns>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.ToString">
            <summary>
            Converts the current value to a signed decimal string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.ToString(System.Int32)">
            <summary>
            Converts the number to a string of the specified base.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.ToString(System.Int32,System.Int32)">
            <summary>
            Converts the number to a string of the specified base.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.ToUInt16">
            <summary>
            Converts the current value to a <see cref="T:System.UInt16"/> (unsigned).
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.ToUInt32">
            <summary>
            Converts the current value to a <see cref="T:System.UInt32"/> (unsigned).
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.ToUInt64">
            <summary>
            Converts the current value to a <see cref="T:System.UInt64"/> (unsigned).
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.Number.ToUnsigned(System.Boolean)">
            <summary>
            Creates an unsigned copy of this value.
            </summary>
            <param name="positiveOnly">Set true to ensure a positive result by returning zero when negative.</param>
            <returns>
            New <see cref="T:CodeForDotNet.Numerics.Number"/> which is unsigned and has the same value when positive, and optionally the same bit value (but different interpreted value)
            or zero when negative (according to the <see paramref="positiveOnly"/> option).
            </returns>
        </member>
        <member name="T:CodeForDotNet.Numerics.NumberExtensions">
            <summary>
            Number extensions.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.NumberExtensions.ToString(System.Int64,System.Int32)">
            <summary>
            Converts the number to a string of the specified base.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.NumberExtensions.ToString(System.Int64,System.Int32,System.Int32)">
            <summary>
            Converts the number to a string of the specified base.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.NumberExtensions.ToString(System.UInt64,System.Int32)">
            <summary>
            Converts the number to a string of the specified base.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Numerics.NumberExtensions.ToString(System.UInt64,System.Int32,System.Int32)">
            <summary>
            Converts the number to a string of the specified base.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.AsyncCompleteCalledTwice">
            <summary>
              Looks up a localized string similar to Asynchronous operation attempted to complete twice..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.AsyncEndCalledTwice">
            <summary>
              Looks up a localized string similar to Asynchronous operation already ended..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.AsyncResultCompleteError">
            <summary>
              Looks up a localized string similar to Async callback threw an exception..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.BrushScaleOnlyForTextures">
            <summary>
              Looks up a localized string similar to Scale is only valid for Texture brush types..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.BrushSingleColorHasNoAngle">
            <summary>
              Looks up a localized string similar to Single color brushes do not have an angle..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.BrushTextureHasNoColor">
            <summary>
              Looks up a localized string similar to Textures do not have a color setting..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.BrushTextureWrapModeOnlyForTextures">
            <summary>
              Looks up a localized string similar to TextureWrapMode property is only valid for Textures!.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.BrushTypeHasNoEndColor">
            <summary>
              Looks up a localized string similar to Current brush type does not have an End color..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.BrushTypeHasNoTexture">
            <summary>
              Looks up a localized string similar to Current brush type does not have a texture..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.CreateOpenRegistryKeyError">
            <summary>
              Looks up a localized string similar to Error creating or opending registry key &quot;{0}&quot;..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.DataObjectChangePropertyStateInvalid">
            <summary>
              Looks up a localized string similar to Cannot change properties of a data object when it&apos;s current state is deleted..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.DataObjectCreateStateInvalid">
            <summary>
              Looks up a localized string similar to Cannot create a data object when it&apos;s current state indicates it exists or is pending deletion..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.DataObjectDeleteStateInvalid">
            <summary>
              Looks up a localized string similar to Cannot delete a data object when it&apos;s current state is not current or changed..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.DataObjectReadStateInvalid">
            <summary>
              Looks up a localized string similar to Cannot read a data object when it&apos;s current state is deleted..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.DataObjectUpdateStateInvalid">
            <summary>
              Looks up a localized string similar to Cannot update a data object when it&apos;s current state is not changed..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.DataSetChangeLogGetPrimaryKeyFilterExpressionNoPrimaryKey">
            <summary>
              Looks up a localized string similar to Table {0} does not have a primary key..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.DataSetChangeLogRedoDeleteError">
            <summary>
              Looks up a localized string similar to Redo delete could not find row to delete..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.DataSetChangeLogRedoUpdateError">
            <summary>
              Looks up a localized string similar to Redo update could not find row to update..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.DataSetChangeLogUndoInsertError">
            <summary>
              Looks up a localized string similar to Undo insert could not find row to delete..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.DataSetChangeLogUndoUpdateError">
            <summary>
              Looks up a localized string similar to Undo update could not find row to restore..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.DaysOfWeekFriday">
            <summary>
              Looks up a localized string similar to Friday.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.DaysOfWeekMonday">
            <summary>
              Looks up a localized string similar to Monday.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.DaysOfWeekSaturday">
            <summary>
              Looks up a localized string similar to Saturday.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.DaysOfWeekSunday">
            <summary>
              Looks up a localized string similar to Sunday.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.DaysOfWeekThursday">
            <summary>
              Looks up a localized string similar to Thursday.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.DaysOfWeekTuesday">
            <summary>
              Looks up a localized string similar to Tuesday.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.DaysOfWeekWednesday">
            <summary>
              Looks up a localized string similar to Wednesday.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.DxDyStringInvalid">
            <summary>
              Looks up a localized string similar to Cannot parse source string to DxDy! Should be #;# format..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.FileExtensionsCopyDirectoryCreateDirectory">
            <summary>
              Looks up a localized string similar to Copying directory {0}....
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.FileExtensionsCopyDirectoryFile">
            <summary>
              Looks up a localized string similar to Copying file {0}....
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.NumberParseFormatErrorSigned">
            <summary>
              Looks up a localized string similar to Cannot convert &quot;{0}&quot; to a signed number of base {1}..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.NumberParseFormatErrorUnsigned">
            <summary>
              Looks up a localized string similar to Cannot convert &quot;{0}&quot; to an unsigned number of base {1}..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.PropertyRequired">
            <summary>
              Looks up a localized string similar to The property &quot;{0}&quot; is required..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.ScheduleItemCollectionToStringFormat">
            <summary>
              Looks up a localized string similar to {0} instance(s); {1}.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.ScheduleItemCollectionToStringSeparator">
            <summary>
              Looks up a localized string similar to , .
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.ScheduleItemOffsetFirst">
            <summary>
              Looks up a localized string similar to first.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.ScheduleItemOffsetLast">
            <summary>
              Looks up a localized string similar to last.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.ScheduleItemOffsetSecond">
            <summary>
              Looks up a localized string similar to second.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.ScheduleItemOffsetThird">
            <summary>
              Looks up a localized string similar to third.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.ScheduleItemToStringDailyFixedEnd">
            <summary>
              Looks up a localized string similar to every {3} day(s) starting on {0:d} at {0:t} for {2} minute(s) until {4} occurrences ({1:d} at {1:t}).
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.ScheduleItemToStringDailyNoEnd">
            <summary>
              Looks up a localized string similar to every {3} day(s) starting on {0:d} at {0:t} for {2} minutes.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.ScheduleItemToStringDayOfWeekSeparator">
            <summary>
              Looks up a localized string similar to  or .
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.ScheduleItemToStringHourlyFixedEnd">
            <summary>
              Looks up a localized string similar to every {3} hour(s) starting on {0:d} at {0:t} for {2} minute(s) until {4} occurrences ({1:d} at {1:t}).
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.ScheduleItemToStringHourlyNoEnd">
            <summary>
              Looks up a localized string similar to every {3} hour(s) starting on {0:d} at {0:t} for {2} minute(s).
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.ScheduleItemToStringMonthlyDayFixedEnd">
            <summary>
              Looks up a localized string similar to every {3} month(s) starting on {0:d} at {0:t} for {2} minute(s) until {4} occurrences ({1:d} at {1:t}).
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.ScheduleItemToStringMonthlyDayNoEnd">
            <summary>
              Looks up a localized string similar to every {3} month(s) starting on {0:d} at {0:t} for {2} minute(s).
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.ScheduleItemToStringMonthlyOffsetNoEnd">
            <summary>
              Looks up a localized string similar to every {4} month(s) on the {3} {0:dddd} starting on {0:d} at {0:t} for {2} minute(s).
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.ScheduleItemToStringMonthlyOffsetRecurring">
            <summary>
              Looks up a localized string similar to every {4} month(s) on the {3} {0:dddd} starting on {0:d} at {0:t} for {2} minute(s) until {5} occurrences ({1:d} at {1:t}).
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.ScheduleItemToStringOnce">
            <summary>
              Looks up a localized string similar to once on {0:d} at {0:t} for {1} minute(s).
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.ScheduleItemToStringWeeklyFixedEnd">
            <summary>
              Looks up a localized string similar to every {4} week(s) on {3} starting on {0:d} at {0:t} for {2} minute(s) until {5} occurrences ({1:d} at {1:t}).
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.ScheduleItemToStringWeeklyNoEnd">
            <summary>
              Looks up a localized string similar to every {4} week(s) on {3} starting on {0:d} at {0:t} for {2} minute(s).
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.ScheduleItemToStringYearlyDayFixedEnd">
            <summary>
              Looks up a localized string similar to every {3} year(s) starting on {0:d} at {0:t} for {2} minute(s) until {4} occurrences ({1:d} at {1:t}).
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.ScheduleItemToStringYearlyDayNoEnd">
            <summary>
              Looks up a localized string similar to every {3} year(s) starting on {0:d} at {0:t} for {2} minute(s).
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.ScheduleItemToStringYearlyOffsetFixedEnd">
            <summary>
              Looks up a localized string similar to every {4} year(s) on the {3} {0:dddd} starting on {0:d} at {0:t} for {2} minute(s) until {5} occurrences ({1:d} at {1:t}).
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.ScheduleItemToStringYearlyOffsetNoEnd">
            <summary>
              Looks up a localized string similar to every {4} year(s) on the {3} {0:dddd} starting on {0:d} at {0:t} for {2} minute(s).
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.ScheduleToStringFormatIncludesAndExcludes">
            <summary>
              Looks up a localized string similar to Includes {0}. Excludes {1}..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.ScheduleToStringFormatIncludesOnly">
            <summary>
              Looks up a localized string similar to Includes {0}..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.ScheduleToStringFormatNone">
            <summary>
              Looks up a localized string similar to Never..
            </summary>
        </member>
        <member name="P:CodeForDotNet.Properties.Resources.XmlValdiationError">
            <summary>
              Looks up a localized string similar to XML validation error at line {0} character {1}. {2}.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Runtime.Serialization.DataContractJsonSerializerExtensions">
            <summary>
            Extensions for working with <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Runtime.Serialization.DataContractJsonSerializerExtensions.DeserializeJson``1(System.String)">
            <summary>
            De-serializes an object from a JSON string.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Runtime.Serialization.DataContractJsonSerializerExtensions.SerializeJsonString``1(``0)">
            <summary>
            Serializes this object as a JSON string.
            </summary>
        </member>
        <member name="T:CodeForDotNet.StringExtensions">
            <summary>
            Extensions for working with the <see cref="T:System.String"/> type.
            </summary>
        </member>
        <member name="F:CodeForDotNet.StringExtensions.AsciiMaximumPrintable">
            <summary>
            Minimum ASCII character value which is printable (not a special character).
            </summary>
        </member>
        <member name="F:CodeForDotNet.StringExtensions.AsciiMinimumPrintable">
            <summary>
            Minimum ASCII character value which is printable (not a special character).
            </summary>
        </member>
        <member name="F:CodeForDotNet.StringExtensions.Truncatellipsis">
            <summary>
            Ellipsis used to end a string which has been truncated.
            </summary>
        </member>
        <member name="M:CodeForDotNet.StringExtensions.EmptyWhenNull(System.String)">
            <summary>
            Returns an empty string ("") when the string is null.
            </summary>
        </member>
        <member name="M:CodeForDotNet.StringExtensions.FilterSpecial(System.String,System.Nullable{System.Char})">
            <summary>
            Filters a string down to printable characters.
            </summary>
            <param name="value">Raw string to filter.</param>
            <param name="placeholder">Optional place-holder to replace filtered characters with.</param>
            <returns>Filtered string.</returns>
        </member>
        <member name="M:CodeForDotNet.StringExtensions.IndexStarting(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Searches a string array for the first index starting with the specified value, using a <see cref="F:System.StringComparison.OrdinalIgnoreCase"/> comparison mode.
            </summary>
            <param name="array">Array to search.</param>
            <param name="value">Value to search for.</param>
            <returns>Index of the first item starting with the value, otherwise -1 when not found.</returns>
        </member>
        <member name="M:CodeForDotNet.StringExtensions.IndexStarting(System.Collections.Generic.IEnumerable{System.String},System.String,System.StringComparison)">
            <summary>
            Searches a string array for the first index starting with the specified value.
            </summary>
            <param name="array">Array to search.</param>
            <param name="value">Value to search for.</param>
            <param name="comparison">Comparison mode.</param>
            <returns>Index of the first item starting with the value, otherwise -1 when not found.</returns>
        </member>
        <member name="M:CodeForDotNet.StringExtensions.NullWhenEmpty(System.String)">
            <summary>
            Returns null when the string is empty.
            </summary>
        </member>
        <member name="M:CodeForDotNet.StringExtensions.Space(System.String)">
            <summary>
            Adds spaces to a string each time a capital letter is encountered, e.g. converts camel or pascal case names to spaced words.
            </summary>
        </member>
        <member name="M:CodeForDotNet.StringExtensions.SplitEscaped(System.String,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Split a string with support for an escape sequence (when not to split).
            </summary>
            <param name="text">The string to split.</param>
            <param name="delimiter">Delimiter</param>
            <param name="escape">Escape character</param>
            <param name="removeEscape">Remove escape characters</param>
            <param name="removeEmptyEntries">Remove empty entries?</param>
        </member>
        <member name="M:CodeForDotNet.StringExtensions.TrimLines(System.String)">
            <summary>
            Trims all lines of a string, removing tabs or white space that may have been added when reading from a configuration file.
            </summary>
            <param name="value">Input value.</param>
            <returns>String with no white space at the beginning or end of every line.</returns>
        </member>
        <member name="M:CodeForDotNet.StringExtensions.Truncate(System.String,System.Int32)">
            <summary>
            Terminates a string with an ellipsis ending "..." if it exceeds a specific length. Useful for building summary list items when the length could be
            much longer.
            </summary>
            <param name="value">The string to truncate.</param>
            <param name="length">
            Maximum length permitted without change, including the ending. When longer the string is truncated to this length minus the length of the ending,
            which is then appended.
            </param>
            <returns>String which is truncated as necessary.</returns>
        </member>
        <member name="M:CodeForDotNet.StringExtensions.Truncate(System.String,System.Int32,System.String)">
            <summary>
            Terminates a string with an ending (e.g. <see cref="F:CodeForDotNet.StringExtensions.Truncatellipsis"/> "...") if it exceeds a specific length. Useful for building summary list items
            when the length could be much longer.
            </summary>
            <param name="value">The string to truncate.</param>
            <param name="length">
            Maximum length permitted without change, including the ending. When longer the string is truncated to this length minus the length of the ending,
            which is then appended.
            </param>
            <param name="ending">Ending to append when the string exceeds the length. Can be null or empty.</param>
            <returns>String which is truncated as necessary.</returns>
        </member>
        <member name="T:CodeForDotNet.Threading.AsyncResult">
            <summary>
            <see cref="T:System.IAsyncResult"/> implementation.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Threading.AsyncResult._callback">
            <summary>
            Optional callback method, invoked upon completion.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Threading.AsyncResult._endCalled">
            <summary>
            Indicates that <see cref="M:CodeForDotNet.Threading.AsyncResult.End``1(System.IAsyncResult)"/> has already been called.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Threading.AsyncResult._exception">
            <summary>
            Stores any error which occurred during completion.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Threading.AsyncResult._waitHandle">
            <summary>
            Handle used to wait for completion.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Threading.AsyncResult.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            Creates an instance.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Threading.AsyncResult.AsyncState">
            <summary>
            Optional state relating to the operation.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Threading.AsyncResult.AsyncWaitHandle">
            <summary>
            Wait handle.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Threading.AsyncResult.CompletedSynchronously">
            <summary>
            Indicates the action was completed synchronously.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Threading.AsyncResult.HasCallback">
            <summary>
            Indicates a completion callback is present.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Threading.AsyncResult.IsCompleted">
            <summary>
            Indicates the operation has completed.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Threading.AsyncResult.Lock">
            <summary>
            Locking object.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Threading.AsyncResult.End``1(System.IAsyncResult)">
            <summary>
            Ends the operation.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Threading.AsyncResult.Complete(System.Boolean)">
            <summary>
            Completes the operation.
            </summary>
            <param name="completedSynchronously">True when completed synchronously.</param>
        </member>
        <member name="M:CodeForDotNet.Threading.AsyncResult.Complete(System.Boolean,System.Exception)">
            <summary>
            Completes the operation with an error.
            </summary>
            <param name="completedSynchronously">True when completed synchronously.</param>
            <param name="exception">Error.</param>
        </member>
        <member name="M:CodeForDotNet.Threading.AsyncResult.Dispose(System.Boolean)">
            <summary>
            Frees resources.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Threading.CompletedAsyncResult">
            <summary>
            An <see cref="T:CodeForDotNet.Threading.AsyncResult"/> which completes instantly (synchronous result wrapped in <see cref="T:System.IAsyncResult"/>).
            </summary>
        </member>
        <member name="M:CodeForDotNet.Threading.CompletedAsyncResult.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            Creates an instance with the specified callback and state, then completes it immediately.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Threading.CompletedAsyncResult.End">
            <summary>
            Waits for the asynchronous operation to end.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Threading.CompletedAsyncResult`1">
            <summary>
            An <see cref="T:CodeForDotNet.Threading.AsyncResult"/> which completes instantly (synchronous result wrapped in <see cref="T:System.IAsyncResult"/>).
            </summary>
        </member>
        <member name="F:CodeForDotNet.Threading.CompletedAsyncResult`1._data">
            <summary>
            State.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Threading.CompletedAsyncResult`1.#ctor(`0,System.AsyncCallback,System.Object)">
            <summary>
            Creates an instance with the specified callback and state, then completes it immediately.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Threading.CompletedAsyncResult`1.End">
            <summary>
            Waits for the asynchronous operation to end.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Threading.IThreadSafe">
            <summary>
            Interface which supports thread safety by providing a synchronization locking object.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Threading.IThreadSafe.SyncRoot">
            <summary>
            Thread synchronization object.
            </summary>
            <remarks>
            Lock this object when you read or write properties of this object which must be complete as a batch before any other threads enter the section, e.g.
            during data load or save operations.
            </remarks>
        </member>
        <member name="T:CodeForDotNet.TimeSpanExtensions">
            <summary>
            Extensions to the <see cref="T:System.TimeSpan"/> class.
            </summary>
        </member>
        <member name="F:CodeForDotNet.TimeSpanExtensions.TicksPerMicrosecond">
            <summary>
            Number of <see cref="P:System.TimeSpan.Ticks"/> in a microsecond.
            </summary>
        </member>
        <member name="M:CodeForDotNet.TimeSpanExtensions.FromMicroseconds(System.Int64)">
            <summary>
            Creates a <see cref="T:System.TimeSpan"/> from an interval specified in microseconds.
            </summary>
        </member>
        <member name="M:CodeForDotNet.TimeSpanExtensions.TotalMicroseconds(System.TimeSpan)">
            <summary>
            Gets the total elapsed time in microseconds.
            </summary>
        </member>
        <member name="T:CodeForDotNet.TypeExtensions">
            <summary>
            Extensions for working with type information.
            </summary>
        </member>
        <member name="M:CodeForDotNet.TypeExtensions.GetAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets the first custom attribute of the specified type, if present.
            </summary>
            <returns>Typed attribute else null when not declared.</returns>
        </member>
        <member name="T:CodeForDotNet.ValueChangedEventArgs`1">
            <summary>
            Event arguments for a changed value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ValueChangedEventArgs`1.#ctor(`0,`0)">
            <summary>
            Creates an instance with the specified values.
            </summary>
            <param name="oldValue">Old value.</param>
            <param name="newValue">New value.</param>
        </member>
        <member name="P:CodeForDotNet.ValueChangedEventArgs`1.NewValue">
            <summary>
            New value.
            </summary>
        </member>
        <member name="P:CodeForDotNet.ValueChangedEventArgs`1.OldValue">
            <summary>
            Old value.
            </summary>
        </member>
        <member name="T:CodeForDotNet.ValueEventArgs`1">
            <summary>
            Event arguments containing a typed value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.ValueEventArgs`1.#ctor(`0)">
            <summary>
            Initializes a new instance with the specified value.
            </summary>
        </member>
        <member name="P:CodeForDotNet.ValueEventArgs`1.Value">
            <summary>
            Gets or sets the value passed with this event.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Xml.PrivateXPathFunctions">
            <summary>
            Provides private (non-standard) XPath functions which are not available in XPath 1.0 or 2.0.
            </summary>
            <remarks>
            Use of private functions should be avoided to ensure all data remains standard and portable. Functions must be lowercase (against typical coding
            standards) to conform to XML naming standards, i.e. extension functions are matched using case sensitivity.
            </remarks>
        </member>
        <member name="F:CodeForDotNet.Xml.PrivateXPathFunctions.XmlNamespace">
            <summary>
            XPath function namespace.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.PrivateXPathFunctions.ToDateTimeLongString(System.DateTime)">
            <summary>
            Converts a date and time to a long format string.
            </summary>
            <param name="value">Date to format.</param>
            <returns>Long format date and time string.</returns>
        </member>
        <member name="M:CodeForDotNet.Xml.PrivateXPathFunctions.ToDateTimeShortString(System.DateTime)">
            <summary>
            Converts a date and time to a short format string.
            </summary>
            <param name="value">Date to format.</param>
            <returns>Short format date and time string.</returns>
        </member>
        <member name="M:CodeForDotNet.Xml.PrivateXPathFunctions.ToLocalTime(System.DateTime)">
            <summary>
            Converts a UTC date and time to local time.
            </summary>
            <param name="value">Date in UTC.</param>
            <returns>Date in local time.</returns>
        </member>
        <member name="M:CodeForDotNet.Xml.PrivateXPathFunctions.ToUniversalTime(System.DateTime)">
            <summary>
            Converts a date and time to UTC.
            </summary>
            <param name="value">Date in local time.</param>
            <returns>Date in UTC.</returns>
        </member>
        <member name="T:CodeForDotNet.Xml.W3cXPathFunctions">
            <summary>
            Implements some of the XPath 2.0 functions, which can be added to an <see cref="T:System.Xml.XPath.XPathExpression"/> or <see cref="T:System.Xml.Xsl.XslCompiledTransform"/> using the
            <see cref="M:System.Xml.Xsl.XsltArgumentList.AddExtensionObject(System.String,System.Object)"/> method and including the "http://www.w3.org/2005/xpath-functions" namespace.
            </summary>
            <remarks>
            See http://www.w3.org/TR/xpath-functions for the specification. Functions must be lowercase (against typical coding standards) to conform to the XPath
            2.0 specification, i.e. extension functions are matched using case sensitivity.
            </remarks>
        </member>
        <member name="F:CodeForDotNet.Xml.W3cXPathFunctions.XmlNamespace">
            <summary>
            W3C namespace for XPath 2.0 functions (which we implement here).
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.W3cXPathFunctions.matches(System.String,System.String)">
            <summary>
            Returns true if the input string matches the regular expression pattern.
            </summary>
            <param name="input">Input string.</param>
            <param name="pattern">Regular expression pattern to match.</param>
            <returns>True when matched.</returns>
        </member>
        <member name="M:CodeForDotNet.Xml.W3cXPathFunctions.matches(System.String,System.String,System.String)">
            <summary>
            Returns true if the input string matches the regular expression pattern.
            </summary>
            <param name="input">Input string.</param>
            <param name="pattern">Regular expression pattern to match.</param>
            <param name="flags">
            Regular expression flag characters, one or more of: s - Single-line mode. Corresponds to <see cref="F:System.Text.RegularExpressions.RegexOptions.Singleline"/>. m - Multi-line mode.
            Corresponds to <see cref="F:System.Text.RegularExpressions.RegexOptions.Multiline"/>. i - Case insensitive match. Corresponds to <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase"/>. x - Ignore
            whitespace in pattern, e.g. when spaces or new lines are used in long patterns to make it readable. Corresponds to <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace"/>.
            </param>
            <returns>True when matched.</returns>
            <remarks>
            The <paramref name="flags"/> parameter cannot have a default to replace the <see cref="M:CodeForDotNet.Xml.W3cXPathFunctions.matches(System.String,System.String)"/> method because the XSLT extensions
            will not find it (does not support optional parameters).
            </remarks>
        </member>
        <member name="T:CodeForDotNet.Xml.XmlAnyDocument">
            <summary>
            Container for unqualified arbitrary XML data which is serializable as child element of a qualified type, i.e. an "xs:any" container.
            </summary>
            <remarks>
            The default root element is "root" when serialized standalone. Normally this is a property of another serializable type, in which case the root is set by
            the XML serialization attributes of the parent property or in the custom serialization code of the parent class if implemented.
            </remarks>
        </member>
        <member name="F:CodeForDotNet.Xml.XmlAnyDocument.XmlNamespace">
            <summary>
            XML namespace.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Xml.XmlAnyDocument.XmlRootName">
            <summary>
            XML root element name.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Xml.XmlAnyDocument.XmlTypeName">
            <summary>
            XML type name.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.#ctor">
            <summary>
            Creates an empty instance.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization constructor.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.Finalize">
            <summary>
            Calls <see cref="M:CodeForDotNet.Xml.XmlAnyDocument.Dispose(System.Boolean)"/> during finalization to free resources in case it was forgotten.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Xml.XmlAnyDocument.IsEmpty">
            <summary>
            Indicates whether the XML is currently empty.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Xml.XmlAnyDocument.Xml">
            <summary>
            XML data.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.GetSchema(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Gets the schema and XML type of this class.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.op_Inequality(CodeForDotNet.Xml.XmlAnyDocument,CodeForDotNet.Xml.XmlAnyDocument)">
            <summary>
            Tests two objects of this type for inequality by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.op_Equality(CodeForDotNet.Xml.XmlAnyDocument,CodeForDotNet.Xml.XmlAnyDocument)">
            <summary>
            Tests two objects of this type for equality by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.Add(System.String,System.String,System.String)">
            <summary>
            Adds XML to the specified data path.
            </summary>
            <param name="sourceXml">XML to add at the path.</param>
            <param name="sourcePath">Source XPath, or null for root.</param>
            <param name="targetPath">Target XPath, or null for root.</param>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.Add(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds XML to the specified data path.
            </summary>
            <param name="sourceXml">XML to add at the path.</param>
            <param name="sourcePath">Source XPath, or null for root.</param>
            <param name="targetPath">Target XPath, or null for root.</param>
            <param name="overwrite">Set true to delete data first.</param>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.Add(System.Xml.XPath.IXPathNavigable,System.String,System.String)">
            <summary>
            Adds XML to the specified data path.
            </summary>
            <param name="sourceXml">XML to add at the path.</param>
            <param name="sourcePath">Source XPath, or null for root.</param>
            <param name="targetPath">Target XPath, or null for root.</param>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.Add(System.Xml.XPath.IXPathNavigable,System.String,System.String,System.Boolean)">
            <summary>
            Adds XML to the specified data path.
            </summary>
            <param name="sourceXml">XML to add at the path.</param>
            <param name="sourcePath">Source XPath, or null for root.</param>
            <param name="targetPath">Target XPath, or null for root.</param>
            <param name="overwrite">Set true to delete data first.</param>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.Clear">
            <summary>
            Removing all content.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.Delete(System.String)">
            <summary>
            Deletes XML from the specified path.
            </summary>
            <param name="path">XPath target path, null for root.</param>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.Dispose">
            <summary>
            Proactively frees resources.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.Equals(System.Object)">
            <summary>
            Compares this object with another by value.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.GetHashCode">
            <summary>
            Returns a hash-code based on the current value of this object.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Called by the binary serializer to get object data.
            </summary>
            <remarks>We need to control serialization because the <see cref="T:System.Xml.XmlDocumentFragment"/> class is not serializable.</remarks>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.GetPath(System.String)">
            <summary>
            Returns an <see cref="T:System.Xml.XPath.XPathNavigator"/> positioned within the data. The path is not created.
            </summary>
            <remarks>Even if this instance was serialized standalone the default "root" element is not part of the path because it is stripped during de-serialization.</remarks>
            <param name="path">Optional XPath expression to select the sub-path. Set null to select the root element.</param>
            <returns><see cref="T:System.Xml.XPath.XPathNavigator"/> positioned at the path or null when not found.</returns>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.GetPath(System.String,System.Boolean)">
            <summary>
            Returns an <see cref="T:System.Xml.XPath.XPathNavigator"/> positioned within the data. Parent elements in the path without filters will be created if the
            <paramref name="create"/> option is set. (up to the first filter).
            </summary>
            <remarks>Even if this instance was serialized standalone the default "root" element is not part of the path because it is stripped during de-serialization.</remarks>
            <param name="path">Optional XPath expression to select the sub-path. Set null to select the root element.</param>
            <param name="create">Create the path if it doesn't exist.</param>
            <returns><see cref="T:System.Xml.XPath.XPathNavigator"/> positioned at the path or null when not found and <paramref name="create"/> was not set true.</returns>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.GetRoot">
            <summary>
            Returns an <see cref="T:System.Xml.XPath.XPathNavigator"/> positioned at the root of the data.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.GetSchema">
            <summary>
            Returns the XML schema for this type.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.ReadXml(System.Xml.XmlReader)">
            <summary>
            Reads properties of this object from XML during de-serialization.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Writes properties of this object to XML during serialization.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlAnyDocument.Dispose(System.Boolean)">
            <summary>
            Frees resources owned by this object.
            </summary>
            <param name="disposing">True when called proactively by <see cref="M:CodeForDotNet.Xml.XmlAnyDocument.Dispose"/>. False when called during finalization.</param>
        </member>
        <member name="T:CodeForDotNet.Xml.XmlExtensions">
            <summary>
            Creates extensions and helper methods for working with XML.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlExtensions.IsValidInXml(System.Char)">
            <summary>
            Checks whether a character is valid according to the XML v1.0 standard, e.g. most control characters are not allowed.
            </summary>
            <param name="value">Character to check.</param>
            <returns>True if the character is allowed else false.</returns>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlExtensions.ReadElement``1(System.Xml.XmlReader,System.String,System.String)">
            <summary>
            Overload of the <see cref="M:System.Xml.XmlReader.ReadElementContentAsObject"/> which behaves similarly to the XmlReader.ReadElementString() method. Required
            because the <see cref="M:System.Xml.XmlReader.ReadElementContentAsObject"/> is not robust enough because it does not move to the next element before reading, so
            fails if any other content (whitespace, comments, etc...) appears at the current position, just before the next element to read.
            </summary>
            <param name="reader">Extension target.</param>
            <param name="localName">
            Optional, when both this and the <paramref name="namespace"/> parameter are specified the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)"/>
            method is called before reading the content. If only this parameter is specified the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String)"/> overload is
            called, otherwise the <see cref="M:System.Xml.XmlReader.ReadStartElement"/>.
            </param>
            <param name="namespace">Optional, when specified causes the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)"/> to be called.</param>
            <return>Value read from the current or specified (name/namespace) element.</return>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlExtensions.ReadElement``1(System.Xml.XmlReader,System.Xml.IXmlNamespaceResolver,System.String,System.String)">
            <summary>
            Overload of the <see cref="M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver)"/> which behaves similarly to the
            XmlReader.ReadElementString() method. Required because the <see cref="M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver)"/> is not robust
            enough because it does not move to the next element before reading, so fails if any other content (whitespace, comments, etc...) appears at the
            current position, just before the next element to read.
            </summary>
            <param name="reader">Extension target.</param>
            <param name="namespaceResolver">See <see cref="M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver)"/>.</param>
            <param name="localName">
            Optional, when both this and the <paramref name="namespace"/> parameter are specified the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)"/>
            method is called before reading the content. If only this parameter is specified the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String)"/> overload is
            called, otherwise the <see cref="M:System.Xml.XmlReader.ReadStartElement"/>.
            </param>
            <param name="namespace">Optional, when specified causes the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)"/> to be called.</param>
            <return>Value read from the current or specified (name/namespace) element.</return>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlExtensions.ReadElementBase64(System.Xml.XmlReader,System.Byte[],System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Overload of the <see cref="M:System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)"/> which behaves similarly to the XmlReader.ReadElementString()
            method. Required because the <see cref="M:System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)"/> is not robust enough because it does not move to
            the next element before reading, so fails if any other content (whitespace, comments, etc...) appears at the current position, just before the next
            element to read.
            </summary>
            <param name="reader">Extension target.</param>
            <param name="buffer">Buffer into which to copy the result.</param>
            <param name="index">Offset in <paramref name="buffer"/> at which data should be read.</param>
            <param name="count">Amount of data to read (if available).</param>
            <param name="localName">
            Optional, when both this and the <paramref name="namespace"/> parameter are specified the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)"/>
            method is called before reading the content. If only this parameter is specified the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String)"/> overload is
            called, otherwise the <see cref="M:System.Xml.XmlReader.ReadStartElement"/>.
            </param>
            <param name="namespace">Optional, when specified causes the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)"/> to be called.</param>
            <return>Number of bytes read (may be less then <paramref name="count"/> when less content exists than requested).</return>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlExtensions.ReadElementBinHex(System.Xml.XmlReader,System.Byte[],System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Overload of the <see cref="M:System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)"/> which behaves similarly to the XmlReader.ReadElementString()
            method. Required because the <see cref="M:System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)"/> is not robust enough because it does not move to
            the next element before reading, so fails if any other content (whitespace, comments, etc...) appears at the current position, just before the next
            element to read.
            </summary>
            <param name="reader">Extension target.</param>
            <param name="buffer">Buffer into which to copy the result.</param>
            <param name="index">Offset in <paramref name="buffer"/> at which data should be read.</param>
            <param name="count">Amount of data to read (if available).</param>
            <param name="localName">
            Optional, when both this and the <paramref name="namespace"/> parameter are specified the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)"/>
            method is called before reading the content. If only this parameter is specified the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String)"/> overload is
            called, otherwise the <see cref="M:System.Xml.XmlReader.ReadStartElement"/>.
            </param>
            <param name="namespace">Optional, when specified causes the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)"/> to be called.</param>
            <return>Number of bytes read (may be less then <paramref name="count"/> when less content exists than requested).</return>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlExtensions.ReadElementBoolean(System.Xml.XmlReader,System.String,System.String)">
            <summary>
            Overload of the <see cref="M:System.Xml.XmlReader.ReadElementContentAsBoolean"/> which behaves similarly to the XmlReader.ReadElementString() method. Required
            because the <see cref="M:System.Xml.XmlReader.ReadElementContentAsBoolean"/> is not robust enough because it does not move to the next element before reading,
            so fails if any other content (whitespace, comments, etc...) appears at the current position, just before the next element to read.
            </summary>
            <param name="reader">Extension target.</param>
            <param name="localName">
            Optional, when both this and the <paramref name="namespace"/> parameter are specified the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)"/>
            method is called before reading the content. If only this parameter is specified the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String)"/> overload is
            called, otherwise the <see cref="M:System.Xml.XmlReader.ReadStartElement"/>.
            </param>
            <param name="namespace">Optional, when specified causes the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)"/> to be called.</param>
            <return>Value read from the current or specified (name/namespace) element.</return>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlExtensions.ReadElementDecimal(System.Xml.XmlReader,System.String,System.String)">
            <summary>
            Overload of the <see cref="M:System.Xml.XmlReader.ReadElementContentAsDecimal"/> which behaves similarly to the XmlReader.ReadElementString() method. Required
            because the <see cref="M:System.Xml.XmlReader.ReadElementContentAsDecimal"/> is not robust enough because it does not move to the next element before reading,
            so fails if any other content (whitespace, comments, etc...) appears at the current position, just before the next element to read.
            </summary>
            <param name="reader">Extension target.</param>
            <param name="localName">
            Optional, when both this and the <paramref name="namespace"/> parameter are specified the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)"/>
            method is called before reading the content. If only this parameter is specified the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String)"/> overload is
            called, otherwise the <see cref="M:System.Xml.XmlReader.ReadStartElement"/>.
            </param>
            <param name="namespace">Optional, when specified causes the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)"/> to be called.</param>
            <return>Value read from the current or specified (name/namespace) element.</return>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlExtensions.ReadElementDouble(System.Xml.XmlReader,System.String,System.String)">
            <summary>
            Overload of the <see cref="M:System.Xml.XmlReader.ReadElementContentAsDouble"/> which behaves similarly to the XmlReader.ReadElementString() method. Required
            because the <see cref="M:System.Xml.XmlReader.ReadElementContentAsDouble"/> is not robust enough because it does not move to the next element before reading, so
            fails if any other content (whitespace, comments, etc...) appears at the current position, just before the next element to read.
            </summary>
            <param name="reader">Extension target.</param>
            <param name="localName">
            Optional, when both this and the <paramref name="namespace"/> parameter are specified the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)"/>
            method is called before reading the content. If only this parameter is specified the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String)"/> overload is
            called, otherwise the <see cref="M:System.Xml.XmlReader.ReadStartElement"/>.
            </param>
            <param name="namespace">Optional, when specified causes the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)"/> to be called.</param>
            <return>Value read from the current or specified (name/namespace) element.</return>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlExtensions.ReadElementInt32(System.Xml.XmlReader,System.String,System.String)">
            <summary>
            Overload of the <see cref="M:System.Xml.XmlReader.ReadElementContentAsInt"/> which behaves similarly to the XmlReader.ReadElementString() method. Required
            because the <see cref="M:System.Xml.XmlReader.ReadElementContentAsInt"/> is not robust enough because it does not move to the next element before reading, so
            fails if any other content (whitespace, comments, etc...) appears at the current position, just before the next element to read.
            </summary>
            <param name="reader">Extension target.</param>
            <param name="localName">
            Optional, when both this and the <paramref name="namespace"/> parameter are specified the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)"/>
            method is called before reading the content. If only this parameter is specified the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String)"/> overload is
            called, otherwise the <see cref="M:System.Xml.XmlReader.ReadStartElement"/>.
            </param>
            <param name="namespace">Optional, when specified causes the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)"/> to be called.</param>
            <return>Value read from the current or specified (name/namespace) element.</return>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlExtensions.ReadElementInt64(System.Xml.XmlReader,System.String,System.String)">
            <summary>
            Overload of the <see cref="M:System.Xml.XmlReader.ReadElementContentAsLong"/> which behaves similarly to the XmlReader.ReadElementString() method. Required
            because the <see cref="M:System.Xml.XmlReader.ReadElementContentAsLong"/> is not robust enough because it does not move to the next element before reading, so
            fails if any other content (whitespace, comments, etc...) appears at the current position, just before the next element to read.
            </summary>
            <param name="reader">Extension target.</param>
            <param name="localName">
            Optional, when both this and the <paramref name="namespace"/> parameter are specified the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)"/>
            method is called before reading the content. If only this parameter is specified the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String)"/> overload is
            called, otherwise the <see cref="M:System.Xml.XmlReader.ReadStartElement"/>.
            </param>
            <param name="namespace">Optional, when specified causes the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)"/> to be called.</param>
            <return>Value read from the current or specified (name/namespace) element.</return>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlExtensions.ReadElementSingle(System.Xml.XmlReader,System.String,System.String)">
            <summary>
            Overload of the <see cref="M:System.Xml.XmlReader.ReadElementContentAsFloat"/> which behaves similarly to the XmlReader.ReadElementString() method. Required
            because the <see cref="M:System.Xml.XmlReader.ReadElementContentAsFloat"/> is not robust enough because it does not move to the next element before reading, so
            fails if any other content (whitespace, comments, etc...) appears at the current position, just before the next element to read.
            </summary>
            <param name="reader">Extension target.</param>
            <param name="localName">
            Optional, when both this and the <paramref name="namespace"/> parameter are specified the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)"/>
            method is called before reading the content. If only this parameter is specified the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String)"/> overload is
            called, otherwise the <see cref="M:System.Xml.XmlReader.ReadStartElement"/>.
            </param>
            <param name="namespace">Optional, when specified causes the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)"/> to be called.</param>
            <return>Value read from the current or specified (name/namespace) element.</return>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlExtensions.StripInvalidXmlChars(System.String)">
            <summary>
            Removes any invalid XML characters from a string.
            </summary>
            <param name="value">XML string.</param>
            <returns>Valid XML string.</returns>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlExtensions.WriteElementValue(System.Xml.XmlWriter,System.String,System.Object)">
            <summary>
            Overload of the <see cref="M:System.Xml.XmlWriter.WriteValue(System.Object)"/> which behaves similarly to the <see cref="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String)"/>
            method. Helps reduce the amount of code necessary to write element values other than string types.
            </summary>
            <param name="writer">Extension target.</param>
            <param name="localName">Element name to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlExtensions.WriteElementValue(System.Xml.XmlWriter,System.String,System.String,System.Object)">
            <summary>
            Overload of the <see cref="M:System.Xml.XmlWriter.WriteValue(System.Object)"/> which behaves similarly to the
            <see cref="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String)"/> method. Helps reduce the amount of code necessary to write element values other
            than string types.
            </summary>
            <param name="writer">Extension target.</param>
            <param name="localName">Element name to write.</param>
            <param name="namespace">Optional element namespace to write.</param>
            <param name="value">Value to write.</param>
        </member>
        <member name="T:CodeForDotNet.Xml.XmlFormatOptions">
            <summary>
            Formatting options for the <see cref="M:CodeForDotNet.Xml.XmlFullExtensions.FormatXml(System.String,System.Text.Encoding,CodeForDotNet.Xml.XmlFormatOptions)"/> method.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Xml.XmlFormatOptions.None">
            <summary>
            No formatting.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Xml.XmlFormatOptions.IgnoreErrors">
            <summary>
            Ignore any errors parsing the XML, in which case the unformatted source is returned, i.e. without change.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Xml.XmlFormatOptions.OmitXmlDeclaration">
            <summary>
            Exclude the XML declaration processing instruction, i.e. &lt;?xml version="1.0" encoding="..." ?/&gt;
            </summary>
        </member>
        <member name="F:CodeForDotNet.Xml.XmlFormatOptions.Indent">
            <summary>
            When set indent elements according to their tree level and removes extra white space around nodes. When not set strips all white space around nodes.
            Use with the <see cref="F:CodeForDotNet.Xml.XmlFormatOptions.Trim"/> option to also strip white space within nodes. Include this option to make the XML easier to read. Exclude this
            option to save space.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Xml.XmlFormatOptions.Trim">
            <summary>
            Trims all content, removing white space from all element and attribute text. This is independent of the <see cref="F:CodeForDotNet.Xml.XmlFormatOptions.Indent"/> option which controls
            white space around nodes.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Xml.XmlFormatOptions.OmitComments">
            <summary>
            Removes all comments when set.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Xml.XmlFormatOptions.OmitNamespaces">
            <summary>
            Removes all namespaces, making them anonymous.
            </summary>
        </member>
        <member name="T:CodeForDotNet.Xml.XmlFullExtensions">
            <summary>
            Creates extensions and helper methods for working with XML.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Xml.XmlFullExtensions.FormatXmlAnyXsltFileName">
            <summary>
            Name of the resource containing the <see cref="P:CodeForDotNet.Xml.XmlFullExtensions.FormatXmlAnyTransform"/>.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Xml.XmlFullExtensions.FormatXmlCopyXsltFileName">
            <summary>
            Name of the resource containing the <see cref="P:CodeForDotNet.Xml.XmlFullExtensions.FormatXmlCopyTransform"/>.
            </summary>
        </member>
        <member name="F:CodeForDotNet.Xml.XmlFullExtensions.FormatXmlTrimXsltFileName">
            <summary>
            Name of the resource containing the <see cref="P:CodeForDotNet.Xml.XmlFullExtensions.FormatXmlTrimTransform"/>.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Xml.XmlFullExtensions.FormatXmlAnyTransform">
            <summary>
            XSLT which removes namespaces from the XML, making it anonymous. Used by the <see cref="M:CodeForDotNet.Xml.XmlFullExtensions.FormatXml(System.String,System.Text.Encoding,CodeForDotNet.Xml.XmlFormatOptions)"/> methods.
            </summary>
        </member>
        <member name="P:CodeForDotNet.Xml.XmlFullExtensions.FormatXmlCopyTransform">
            <summary>
            XSLT which simply copies all XML content. Used by the <see cref="M:CodeForDotNet.Xml.XmlFullExtensions.FormatXml(System.String,System.Text.Encoding,CodeForDotNet.Xml.XmlFormatOptions)"/> methods.
            </summary>
            <remarks>
            Normally this transform would not be needed because it does nothing and the <see cref="T:System.Xml.XmlWriter"/> can perform indenting directly. However for
            performance and to workaround an issue (wrapping a MemoryStream with a StreamWriter then an XmlWriter produces null output) all formatting is passed
            through the XSL engine which supports the switching of encoding at the same time as writing to an <see cref="T:System.Xml.XmlWriter"/> with specific settings. The
            <see cref="T:System.Xml.XmlWriter"/> used during the transform controls the indent option.
            </remarks>
        </member>
        <member name="P:CodeForDotNet.Xml.XmlFullExtensions.FormatXmlTrimTransform">
            <summary>
            XSLT which trims XML content fully including attribute values and element content. Used by the
            <see cref="M:CodeForDotNet.Xml.XmlFullExtensions.FormatXml(System.String,System.Text.Encoding,CodeForDotNet.Xml.XmlFormatOptions)"/> methods.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlFullExtensions.CreateXPathDocument(System.String)">
            <summary>
            Creates an <see cref="T:System.Xml.XPath.XPathDocument"/> from this string assuming it contains well formed XML data.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlFullExtensions.DeleteChildren(System.Xml.XPath.XPathNavigator,System.Xml.XPath.XPathNodeType)">
            <summary>
            Deletes all child nodes of the specified type.
            </summary>
            <param name="navigator">Extension instance.</param>
            <param name="type">The <see cref="T:System.Xml.XPath.XPathNodeType"/> of children to delete.</param>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlFullExtensions.FormatXml(System.String,System.Text.Encoding,CodeForDotNet.Xml.XmlFormatOptions)">
            <summary>
            Formats an XML string applying specific encoding and formatting options.
            </summary>
            <param name="value">String to which this extension method applies.</param>
            <param name="encoding">
            Encoding use for the transformed output. Use the same encoding as the target device to preserve all content, e.g. HTTP request encoding or database
            XML encoding (Unicode for SQL Server).
            </param>
            <param name="options">Formatting options.</param>
            <returns>Formatted string.</returns>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlFullExtensions.GetNamespaces(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Gets a unique list of all prefixes and their namespaces from a <see cref="T:System.Xml.Schema.XmlSchemaSet"/>
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlFullExtensions.GetReaderValidationSettings(System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Gets <see cref="T:System.Xml.XmlReaderSettings"/> configured to validate the specified schemas and throw exceptions when warnings occur.
            </summary>
            <param name="schemas">Schemas to validate.</param>
            <returns>Settings to specify in the <see cref="T:System.Xml.XmlReader"/> to cause validation to occur.</returns>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlFullExtensions.LoadXml(System.Xml.Xsl.XslCompiledTransform,System.String)">
            <summary>
            Loads an XSLT transform from an XML string.
            </summary>
            <param name="transform"><see cref="T:System.Xml.Xsl.XslCompiledTransform"/> to which this extension applies.</param>
            <param name="xml">String containing the XML to load.</param>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlFullExtensions.Merge(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaSet)">
            <summary>
            Adds the schemas if they are not already present.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlFullExtensions.ReadElementDateTime(System.Xml.XmlReader,System.String,System.String)">
            <summary>
            Overload of the <see cref="M:System.Xml.XmlReader.ReadElementContentAsDateTime"/> which behaves similarly to the <see cref="M:System.Xml.XmlReader.ReadElementString"/>
            method. Required because the <see cref="M:System.Xml.XmlReader.ReadElementContentAsDateTime"/> is not robust enough because it does not move to the next element
            before reading, so fails if any other content (whitespace, comments, etc...) appears at the current position, just before the next element to read.
            </summary>
            <param name="reader">Extension target.</param>
            <param name="localName">
            Optional, when both this and the <paramref name="namespace"/> parameter are specified the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)"/>
            method is called before reading the content. If only this parameter is specified the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String)"/> overload is
            called, otherwise the <see cref="M:System.Xml.XmlReader.ReadStartElement"/>.
            </param>
            <param name="namespace">Optional, when specified causes the <see cref="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)"/> to be called.</param>
            <return>Value read from the current or specified (name/namespace) element.</return>
        </member>
        <member name="T:CodeForDotNet.Xml.XmlSerializerExtensions">
            <summary>
            XML serialization extensions.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlSerializerExtensions.DeserializeXml``1(System.String)">
            <summary>
            De-serializes an object from a string using the <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlSerializerExtensions.DeserializeXml``1(System.String,System.Type[])">
            <summary>
            De-serializes an object from a string using the <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlSerializerExtensions.DeserializeXml``1(System.Xml.XmlReader)">
            <summary>
            De-serializes an object from an <see cref="T:System.Xml.XmlReader"/> using the <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlSerializerExtensions.DeserializeXml``1(System.Xml.XmlReader,System.Type[])">
            <summary>
            De-serializes an object from an <see cref="T:System.Xml.XmlReader"/> using the <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlSerializerExtensions.DeserializeXml(System.Type,System.String)">
            <summary>
            De-serializes an object from a string using the <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlSerializerExtensions.DeserializeXml(System.Type,System.Xml.XmlReader)">
            <summary>
            De-serializes an object from an <see cref="T:System.Xml.XmlReader"/> using the <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlSerializerExtensions.DeserializeXml(System.Type,System.Xml.XmlReader,System.Type[])">
            <summary>
            De-serializes an object from an <see cref="T:System.Xml.XmlReader"/> using the <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlSerializerExtensions.IsXmlSerializable(System.Type)">
            <summary>
            Determines if the specified type is XML serializable.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlSerializerExtensions.SerializeXml(System.Object)">
            <summary>
            Serializes the object to an XML string using the <see cref="T:System.Xml.Serialization.XmlSerializer"/>, with optional formatting.
            </summary>
            <param name="value">XML serializable object.</param>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlSerializerExtensions.SerializeXml(System.Object,System.Boolean)">
            <summary>
            Serializes the object to an XML string using the <see cref="T:System.Xml.Serialization.XmlSerializer"/>, with optional formatting.
            </summary>
            <param name="value">XML serializable object.</param>
            <param name="format">Set true to format the XML by indenting each parent-child element on new lines.</param>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlSerializerExtensions.SerializeXml(System.Object,System.Type[])">
            <summary>
            Serializes the object to an XML string using the <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="value">XML serializable object.</param>
            <param name="extraTypes">Additional types the serializer must know.</param>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlSerializerExtensions.SerializeXml(System.Object,System.Type[],System.Boolean)">
            <summary>
            Serializes the object to an XML string using the <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="value">XML serializable object.</param>
            <param name="extraTypes">Additional types the serializer must know.</param>
            <param name="format">Set true to format the XML by indenting each parent-child element on new lines.</param>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlSerializerExtensions.SerializeXml(System.Object,System.Xml.XmlWriter)">
            <summary>
            Serializes the object to an <see cref="T:System.Xml.XmlWriter"/> using the <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="value">XML serializable object.</param>
            <param name="writer">XML writer to serialize to. It's settings may be modified.</param>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlSerializerExtensions.SerializeXml(System.Object,System.Xml.XmlWriter,System.Type[])">
            <summary>
            Serializes the object to an <see cref="T:System.Xml.XmlWriter"/> using the <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
            <param name="value">XML serializable object.</param>
            <param name="writer">XML writer to serialize to. It's settings may be modified.</param>
            <param name="extraTypes">Additional types the serializer must know.</param>
        </member>
        <member name="T:CodeForDotNet.Xml.XmlSerializerNamespacesExtensions">
            <summary>
            Extensions for working with the <see cref="T:System.Xml.Serialization.XmlSerializer"/>.
            </summary>
        </member>
        <member name="M:CodeForDotNet.Xml.XmlSerializerNamespacesExtensions.Merge(System.Xml.Serialization.XmlSerializerNamespaces,System.Xml.Serialization.XmlSerializerNamespaces)">
            <summary>
            Merges namespaces.
            </summary>
        </member>
    </members>
</doc>
